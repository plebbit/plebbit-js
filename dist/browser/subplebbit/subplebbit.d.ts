import { ChallengeAnswerMessage } from "../challenge";
import { Signer } from "../signer";
import { PostsPages } from "../pages";
import { Plebbit } from "../plebbit";
import { DbHandlerPublicAPI, ProtocolVersion, SubplebbitEvents } from "../types";
import Logger from "@plebbit/plebbit-logger";
import { JsonSignature } from "../signer/constants";
import { TypedEmitter } from "tiny-typed-emitter";
import { SubplebbitClientsManager } from "../clients/client-manager";
import { Flair, FlairOwner, InternalSubplebbitRpcType, InternalSubplebbitType, SubplebbitEditOptions, SubplebbitEncryption, SubplebbitFeatures, SubplebbitIpfsType, SubplebbitRole, SubplebbitSettings, SubplebbitStats, SubplebbitSuggested, SubplebbitType } from "./types";
export declare class Subplebbit extends TypedEmitter<SubplebbitEvents> implements Omit<SubplebbitType, "posts"> {
    title?: string;
    description?: string;
    roles?: {
        [authorAddress: string]: SubplebbitRole;
    };
    lastPostCid?: string;
    lastCommentCid?: string;
    posts: PostsPages;
    pubsubTopic?: string;
    stats?: SubplebbitStats;
    features?: SubplebbitFeatures;
    suggested?: SubplebbitSuggested;
    flairs?: Record<FlairOwner, Flair[]>;
    address: string;
    shortAddress: string;
    statsCid?: string;
    createdAt: number;
    updatedAt: number;
    signer?: Signer;
    encryption: SubplebbitEncryption;
    protocolVersion: ProtocolVersion;
    signature: JsonSignature;
    rules?: string[];
    settings?: SubplebbitSettings;
    _rawSubplebbitType?: SubplebbitIpfsType;
    challenges?: SubplebbitType["challenges"];
    state: "stopped" | "updating" | "started";
    startedState: "stopped" | "publishing-ipns" | "failed" | "succeeded";
    updatingState: "stopped" | "resolving-address" | "fetching-ipns" | "fetching-ipfs" | "failed" | "succeeded";
    plebbit: Plebbit;
    dbHandler?: DbHandlerPublicAPI;
    clients: SubplebbitClientsManager["clients"];
    private sortHandler;
    private _updateTimeout?;
    private _syncInterval?;
    private _subplebbitUpdateTrigger;
    private _isSubRunningLocally;
    private _publishLoopPromise;
    private _ipfsNodeKeys;
    private _loadingOperation;
    private _commentUpdateIpnsLifetimeSeconds;
    _clientsManager: SubplebbitClientsManager;
    private _updateRpcSubscriptionId?;
    private _startRpcSubscriptionId?;
    private _cidsToUnPin;
    private _challengeAnswerPromises;
    private _challengeAnswerResolveReject;
    private _ongoingChallengeExchanges;
    constructor(plebbit: Plebbit);
    initSubplebbit(newProps: InternalSubplebbitType | SubplebbitEditOptions | SubplebbitIpfsType): Promise<void>;
    private setAddress;
    private _initSignerProps;
    private initDbHandlerIfNeeded;
    toJSONInternal(): InternalSubplebbitType;
    toJSONInternalRpc(): InternalSubplebbitRpcType;
    toJSON(): SubplebbitType;
    private _toJSONBase;
    toJSONIpfs(): SubplebbitIpfsType;
    private _importSignerIntoIpfsIfNeeded;
    _defaultSettingsOfChallenges(log: Logger): Promise<void>;
    _createNewLocalSubDb(): Promise<void>;
    _loadLocalSubDb(): Promise<void>;
    private assertDomainResolvesCorrectly;
    edit(newSubplebbitOptions: SubplebbitEditOptions): Promise<Subplebbit>;
    _setState(newState: Subplebbit["state"]): void;
    _setUpdatingState(newState: Subplebbit["updatingState"]): void;
    _setStartedState(newState: Subplebbit["startedState"]): void;
    _setRpcClientState(newState: Subplebbit["clients"]["plebbitRpcClients"][""]["state"]): void;
    private _updateRpcClientStateFromStartedState;
    private _updateRpcClientStateFromUpdatingState;
    private _retryLoadingSubplebbitIpns;
    private updateOnce;
    update(): Promise<void>;
    private pubsubTopicWithfallback;
    stop(): Promise<void>;
    private _unpinStaleCids;
    private _isCurrentSubplebbitEqualToLatestPublishedRecord;
    private updateSubplebbitIpnsIfNeeded;
    private storeCommentEdit;
    private storeVote;
    private isPublicationVote;
    private isPublicationComment;
    private isPublicationReply;
    private isPublicationPost;
    private isPublicationCommentEdit;
    private storePublication;
    private _decryptOrRespondWithFailure;
    private _respondWithErrorIfSignatureOfPublicationIsInvalid;
    private _publishChallenges;
    private _publishFailedChallengeVerification;
    private _publishChallengeVerification;
    private _checkPublicationValidity;
    private handleChallengeRequest;
    private _cleanUpChallengeAnswerPromise;
    handleChallengeAnswer(challengeAnswer: ChallengeAnswerMessage): Promise<void>;
    private handleChallengeExchange;
    private _publishCommentIpns;
    private _updateComment;
    private _listenToIncomingRequests;
    private _getDbInternalState;
    private _mergeInstanceStateWithDbState;
    private _switchDbWhileRunningIfNeeded;
    private _updateCommentsThatNeedToBeUpdated;
    private _repinCommentsIPFSIfNeeded;
    private syncIpnsWithDb;
    private _updateDbInternalState;
    private _syncLoop;
    start(): Promise<void>;
    delete(): Promise<void>;
}
