import Logger from "@plebbit/plebbit-logger";
import { Plebbit } from "../../../plebbit/plebbit.js";
import type { CreateNewLocalSubplebbitParsedOptions, InternalSubplebbitRecordBeforeFirstUpdateType, InternalSubplebbitRecordAfterFirstUpdateType, ParsedSubplebbitEditOptions, SubplebbitEditOptions, RpcInternalSubplebbitRecordBeforeFirstUpdateType, RpcInternalSubplebbitRecordAfterFirstUpdateType } from "../../../subplebbit/types.js";
import { DbHandler } from "./db-handler.js";
import type { ChallengeAnswerMessageType, ChallengeRequestMessageType } from "../../../pubsub-messages/types.js";
import { SignerWithPublicKeyAddress } from "../../../signer/index.js";
import { RpcLocalSubplebbit } from "../../../subplebbit/rpc-local-subplebbit.js";
export declare class LocalSubplebbit extends RpcLocalSubplebbit implements CreateNewLocalSubplebbitParsedOptions {
    signer: SignerWithPublicKeyAddress;
    private _postUpdatesBuckets;
    private _defaultSubplebbitChallenges;
    private _challengeAnswerPromises;
    private _challengeAnswerResolveReject;
    private _ongoingChallengeExchanges;
    private _challengeExchangesFromLocalPublishers;
    _cidsToUnPin: Set<string>;
    _mfsPathsToRemove: Set<string>;
    private _subplebbitUpdateTrigger;
    private _combinedHashOfPendingCommentsCids;
    private _pageGenerator;
    _dbHandler: DbHandler;
    private _stopHasBeenCalled;
    private _publishLoopPromise?;
    private _updateLoopPromise?;
    private _firstUpdateAfterStart;
    private _internalStateUpdateId;
    private _mirroredStartedOrUpdatingSubplebbit?;
    private _pendingEditProps;
    _blocksToRm: string[];
    constructor(plebbit: Plebbit);
    toJSONInternalAfterFirstUpdate(): InternalSubplebbitRecordAfterFirstUpdateType;
    toJSONInternalBeforeFirstUpdate(): InternalSubplebbitRecordBeforeFirstUpdateType;
    toJSONInternalRpcAfterFirstUpdate(): RpcInternalSubplebbitRecordAfterFirstUpdateType;
    toJSONInternalRpcBeforeFirstUpdate(): RpcInternalSubplebbitRecordBeforeFirstUpdateType;
    private _updateStartedValue;
    initNewLocalSubPropsNoMerge(newProps: CreateNewLocalSubplebbitParsedOptions): Promise<void>;
    initInternalSubplebbitAfterFirstUpdateNoMerge(newProps: InternalSubplebbitRecordAfterFirstUpdateType): Promise<void>;
    initInternalSubplebbitBeforeFirstUpdateNoMerge(newProps: InternalSubplebbitRecordBeforeFirstUpdateType): Promise<void>;
    private initDbHandlerIfNeeded;
    _updateInstancePropsWithStartedSubOrDb(): Promise<void>;
    private _importSubplebbitSignerIntoIpfsIfNeeded;
    _updateDbInternalState(props: Partial<InternalSubplebbitRecordBeforeFirstUpdateType | InternalSubplebbitRecordAfterFirstUpdateType>): Promise<InternalSubplebbitRecordBeforeFirstUpdateType | InternalSubplebbitRecordAfterFirstUpdateType>;
    private _getDbInternalState;
    private _updateInstanceStateWithDbState;
    _setChallengesToDefaultIfNotDefined(log: Logger): Promise<void>;
    _createNewLocalSubDb(): Promise<void>;
    private _calculateNewPostUpdates;
    private _calculateLatestUpdateTrigger;
    private _requireSubplebbitUpdateIfModQueueChanged;
    _resolveIpnsAndLogIfPotentialProblematicSequence(): Promise<void>;
    private updateSubplebbitIpnsIfNeeded;
    private shouldResolveDomainForVerification;
    private _validateSubSizeSchemaAndSignatureBeforePublishing;
    private storeCommentEdit;
    private storeCommentModeration;
    private storeVote;
    private storeSubplebbitEditPublication;
    private isPublicationReply;
    private isPublicationPost;
    private _calculateLinkProps;
    private _calculateLatestPostProps;
    private _calculateReplyProps;
    private storeComment;
    private storePublication;
    private _decryptOrRespondWithFailure;
    private _respondWithErrorIfSignatureOfPublicationIsInvalid;
    private _publishChallenges;
    private _publishFailedChallengeVerification;
    private _storePublicationAndEncryptForChallengeVerification;
    private _publishChallengeVerification;
    private _isPublicationAuthorPartOfRoles;
    private _checkPublicationValidity;
    private _parseChallengeRequestPublicationOrRespondWithFailure;
    handleChallengeRequest(request: ChallengeRequestMessageType, isLocalPublisher: boolean): Promise<void>;
    private _cleanUpChallengeAnswerPromise;
    private _parseChallengeAnswerOrRespondWithFailure;
    handleChallengeAnswer(challengeAnswer: ChallengeAnswerMessageType): Promise<void>;
    private handleChallengeExchange;
    private _calculateLocalMfsPathForCommentUpdate;
    private _calculateNewCommentUpdate;
    private _validateCommentUpdateSignature;
    private _listenToIncomingRequests;
    private _movePostUpdatesFolderToNewAddress;
    private _updateCommentsThatNeedToBeUpdated;
    private _addCommentRowToIPFS;
    private _repinCommentsIPFSIfNeeded;
    private _unpinStaleCids;
    private _rmUnneededMfsPaths;
    private pubsubTopicWithfallback;
    private _repinCommentUpdateIfNeeded;
    private _syncPostUpdatesWithIpfs;
    private _adjustPostUpdatesBucketsIfNeeded;
    private _cleanUpIpfsRepoRarely;
    private _purgeDisapprovedCommentsOlderThan;
    private syncIpnsWithDb;
    private _assertDomainResolvesCorrectly;
    private _initSignerProps;
    private _publishLoop;
    private _initBeforeStarting;
    private _parseRolesToEdit;
    private _parseChallengesToEdit;
    _validateNewAddressBeforeEditing(newAddress: string, log: Logger): Promise<void>;
    _editPropsOnStartedSubplebbit(parsedEditOptions: ParsedSubplebbitEditOptions): Promise<typeof this>;
    _editPropsOnNotStartedSubplebbit(parsedEditOptions: ParsedSubplebbitEditOptions): Promise<typeof this>;
    edit(newSubplebbitOptions: SubplebbitEditOptions): Promise<typeof this>;
    start(): Promise<void>;
    private _initMirroringStartedOrUpdatingSubplebbit;
    private _cleanUpMirroredStartedOrUpdatingSubplebbit;
    private _updateOnce;
    private _updateLoop;
    update(): Promise<void>;
    stop(): Promise<void>;
    delete(): Promise<void>;
}
