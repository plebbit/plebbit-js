import EventEmitter from "events";
import type { CreateNewLocalSubplebbitUserOptions, RpcInternalSubplebbitRecordBeforeFirstUpdateType, SubplebbitEditOptions, RpcLocalSubplebbitUpdateResultType } from "../../subplebbit/types.js";
import type { PageIpfs } from "../../pages/types.js";
import type { DecryptedChallengeAnswer, DecryptedChallengeRequest } from "../../pubsub-messages/types.js";
import type { PlebbitWsServerSettingsSerialized } from "../../rpc/src/types.js";
import type { CommentIpfsType } from "../../publications/comment/types.js";
import { SetNewSettingsPlebbitWsServerSchema } from "../../rpc/src/schema.js";
import * as z from "zod";
import { TypedEmitter } from "tiny-typed-emitter";
import type { PlebbitRpcClientEvents } from "../../types.js";
export default class PlebbitRpcClient extends TypedEmitter<PlebbitRpcClientEvents> {
    state: "stopped" | "connecting" | "failed" | "connected";
    subplebbits: string[];
    settings?: PlebbitWsServerSettingsSerialized;
    private _webSocketClient;
    private _websocketServerUrl;
    private _subscriptionEvents;
    private _pendingSubscriptionMsgs;
    private _timeoutSeconds;
    private _openConnectionPromise?;
    constructor(rpcServerUrl: string);
    setState(newState: PlebbitRpcClient["state"]): void;
    _init(): Promise<void>;
    destroy(): Promise<void>;
    toJSON(): undefined;
    getSubscription(subscriptionId: number): EventEmitter;
    unsubscribe(subscriptionId: number): Promise<void>;
    emitAllPendingMessages(subscriptionId: number): void;
    getComment(parsedCommentCid: string): Promise<CommentIpfsType>;
    getCommentPage(pageCid: string, commentCid: string, subplebbitAddress: string): Promise<PageIpfs>;
    getSubplebbitPage(pageCid: string, subplebbitAddress: string): Promise<PageIpfs>;
    createSubplebbit(createSubplebbitOptions: CreateNewLocalSubplebbitUserOptions): Promise<RpcInternalSubplebbitRecordBeforeFirstUpdateType>;
    private _initSubscriptionEvent;
    startSubplebbit(subplebbitAddress: string): Promise<number>;
    stopSubplebbit(subplebbitAddress: string): Promise<void>;
    editSubplebbit(subplebbitAddress: string, subplebbitEditOptions: SubplebbitEditOptions): Promise<RpcLocalSubplebbitUpdateResultType>;
    deleteSubplebbit(subplebbitAddress: string): Promise<void>;
    subplebbitUpdateSubscribe(subplebbitAddress: string): Promise<number>;
    publishComment(commentProps: DecryptedChallengeRequest): Promise<number>;
    publishCommentEdit(commentEditProps: DecryptedChallengeRequest): Promise<number>;
    publishCommentModeration(commentModProps: DecryptedChallengeRequest): Promise<number>;
    publishVote(voteProps: DecryptedChallengeRequest): Promise<number>;
    commentUpdateSubscribe(commentCid: string): Promise<number>;
    publishChallengeAnswers(subscriptionId: number, challengeAnswers: DecryptedChallengeAnswer["challengeAnswers"]): Promise<true>;
    resolveAuthorAddress(parsedAuthorAddress: string): Promise<string | null>;
    initalizeSubplebbitschangeEvent(): Promise<void>;
    initalizeSettingschangeEvent(): Promise<void>;
    fetchCid(parsedCid: string): Promise<string>;
    setSettings(settings: z.input<typeof SetNewSettingsPlebbitWsServerSchema>): Promise<true>;
    rpcCall(method: string, params: any[]): Promise<any>;
    getDefaults(): Promise<void>;
    getPeers(): Promise<void>;
    getStats(): Promise<void>;
}
