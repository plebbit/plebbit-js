import Publication from "../publication.js";
import type { DecryptedChallengeVerification } from "../../pubsub-messages/types.js";
import type { AuthorWithOptionalCommentUpdateJson, PublicationTypeName } from "../../types.js";
import type { RepliesPagesTypeIpfs } from "../../pages/types.js";
import { Plebbit } from "../../plebbit/plebbit.js";
import { CommentClientsManager } from "../../clients/client-manager.js";
import type { CommentIpfsType, CommentIpfsWithCidPostCidDefined, CommentPubsubMessagePublication, CommentState, CommentUpdateType, CommentUpdatingState, CommentWithinPageJson, CreateCommentOptions } from "./types.js";
import { RepliesPages } from "../../pages/pages.js";
import type { SignerType } from "../../signer/types.js";
export declare class Comment extends Publication implements CommentPubsubMessagePublication, Partial<CommentIpfsWithCidPostCidDefined>, Partial<Omit<CommentUpdateType, "replies">> {
    shortCid?: CommentWithinPageJson["shortCid"];
    clients: CommentClientsManager["clients"];
    author: AuthorWithOptionalCommentUpdateJson;
    title?: CommentPubsubMessagePublication["title"];
    link?: CommentPubsubMessagePublication["link"];
    linkWidth?: CommentPubsubMessagePublication["linkWidth"];
    linkHeight?: CommentPubsubMessagePublication["linkHeight"];
    thumbnailUrl?: CommentIpfsType["thumbnailUrl"];
    thumbnailUrlWidth?: CommentIpfsType["thumbnailUrlWidth"];
    thumbnailUrlHeight?: CommentIpfsType["thumbnailUrlHeight"];
    cid?: CommentIpfsWithCidPostCidDefined["cid"];
    parentCid?: CommentIpfsType["parentCid"];
    content?: CommentPubsubMessagePublication["content"];
    previousCid?: CommentIpfsType["previousCid"];
    depth?: CommentIpfsType["depth"];
    postCid?: CommentIpfsType["postCid"];
    linkHtmlTagName?: CommentPubsubMessagePublication["linkHtmlTagName"];
    original?: CommentWithinPageJson["original"];
    upvoteCount?: CommentUpdateType["upvoteCount"];
    downvoteCount?: CommentUpdateType["downvoteCount"];
    replyCount?: CommentUpdateType["replyCount"];
    updatedAt?: CommentUpdateType["updatedAt"];
    replies: RepliesPages;
    edit?: CommentUpdateType["edit"];
    flair?: CommentPubsubMessagePublication["flair"];
    deleted?: CommentWithinPageJson["deleted"];
    spoiler?: CommentIpfsType["spoiler"];
    nsfw?: CommentIpfsType["nsfw"];
    pinned?: CommentUpdateType["pinned"];
    locked?: CommentUpdateType["locked"];
    removed?: CommentUpdateType["removed"];
    reason?: CommentUpdateType["reason"];
    lastChildCid?: CommentUpdateType["lastChildCid"];
    lastReplyTimestamp?: CommentUpdateType["lastReplyTimestamp"];
    signature: CommentPubsubMessagePublication["signature"];
    state: CommentState;
    updatingState: CommentUpdatingState;
    private _updateInterval?;
    _rawCommentUpdate?: CommentUpdateType;
    _rawCommentIpfs?: CommentIpfsType;
    private _loadingOperation?;
    _clientsManager: CommentClientsManager;
    private _updateRpcSubscriptionId?;
    _pubsubMsgToPublish?: CommentPubsubMessagePublication;
    challengeRequest?: CreateCommentOptions["challengeRequest"];
    constructor(plebbit: Plebbit);
    _initClients(): void;
    private _setOriginalFieldBeforeModifying;
    _initLocalProps(props: {
        comment: CommentPubsubMessagePublication;
        signer?: SignerType;
        challengeRequest?: CreateCommentOptions["challengeRequest"];
    }): void;
    _initPubsubMessageProps(props: CommentPubsubMessagePublication): void;
    _initIpfsProps(props: CommentIpfsType): void;
    _initProps(props: CommentIpfsType | CommentPubsubMessagePublication): void;
    _initCommentUpdate(props: CommentUpdateType | CommentWithinPageJson): void;
    _updateRepliesPostsInstance(newReplies: CommentUpdateType["replies"] | CommentWithinPageJson["replies"] | Pick<RepliesPagesTypeIpfs, "pageCids">): void;
    private _verifyChallengeVerificationCommentProps;
    private _addOwnCommentToIpfsIfConnectedToIpfsClient;
    private _updateCommentPropsFromDecryptedChallengeVerification;
    protected _verifyDecryptedChallengeVerificationAndUpdateCommentProps(decryptedVerification: DecryptedChallengeVerification): Promise<void>;
    getType(): PublicationTypeName;
    toJSONIpfs(): CommentIpfsType;
    toJSONPubsubMessagePublication(): CommentPubsubMessagePublication;
    setCid(newCid: string): void;
    setSubplebbitAddress(newSubplebbitAddress: string): void;
    private _isCommentIpfsErrorRetriable;
    private _retryLoadingCommentIpfs;
    private _retryLoadingCommentUpdate;
    updateOnce(): Promise<void>;
    _setUpdatingState(newState: Comment["updatingState"]): void;
    protected _setRpcClientState(newState: Comment["clients"]["plebbitRpcClients"][""]["state"]): void;
    protected _updateRpcClientStateFromUpdatingState(updatingState: Comment["updatingState"]): void;
    private _isRetriableRpcError;
    private _handleUpdateEventFromRpc;
    private _handleUpdatingStateChangeFromRpc;
    private _handleStateChangeFromRpc;
    private _handleErrorEventFromRpc;
    private _updateViaRpc;
    update(): Promise<void>;
    private _stopUpdateLoop;
    stop(): Promise<void>;
    private _validateSignature;
    publish(): Promise<void>;
}
