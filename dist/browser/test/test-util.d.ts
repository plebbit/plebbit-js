import { Comment } from "../comment";
import Post from "../post";
import { Plebbit } from "../plebbit";
import Vote from "../vote";
import { Pages } from "../pages";
import { Subplebbit } from "../subplebbit";
import { CommentType, CreateCommentOptions, CreateSubplebbitOptions, PostType, SignerType, VoteType } from "../types";
import Publication from "../publication";
export declare function generateMockPost(subplebbitAddress: string, plebbit: Plebbit, signer?: SignerType, randomTimestamp?: boolean, postProps?: Partial<CreateCommentOptions | PostType>): Promise<Comment | Post>;
export declare function generateMockComment(parentPostOrComment: Post | Comment, plebbit: Plebbit, signer?: SignerType, randomTimestamp?: boolean, commentProps?: Partial<CreateCommentOptions | CommentType>): Promise<Comment>;
export declare function generateMockVote(parentPostOrComment: Comment | Post, vote: -1 | 0 | 1, plebbit: Plebbit, signer?: SignerType): Promise<Vote>;
export declare function loadAllPages(pageCid: string, pagesInstance: Pages): Promise<CommentType[]>;
export declare function getAllCommentsUnderSubplebbit(subplebbit: Subplebbit): Promise<Comment[]>;
export declare function startSubplebbits(props: {
    signers: SignerType[];
    syncInterval: number;
    dataPath: string;
    votesPerCommentToPublish: number;
    numOfCommentsToPublish: number;
}): Promise<void>;
export declare function mockPlebbit(dataPath?: string): Promise<Plebbit>;
export declare function publishRandomReply(parentComment: Comment, plebbit: Plebbit, commentProps: Partial<CommentType>, waitTillCommentIsOnline?: boolean): Promise<Comment>;
export declare function publishRandomPost(subplebbitAddress: string, plebbit: Plebbit, postProps?: Partial<PostType>, waitTillCommentIsOnline?: boolean): Promise<Comment | Post>;
export declare function publishVote(commentCid: string, vote: 1 | 0 | -1, plebbit: Plebbit, voteProps?: Partial<VoteType>): Promise<void>;
export declare function publishWithExpectedResult(publication: Publication, expectedChallengeSuccess: boolean, expectedReason?: string): Promise<void>;
export declare function findCommentInPage(commentCid: string, pageCid: string, pages: Pages): Promise<CommentType>;
export declare function waitTillCommentIsInParentPages(comment: Comment, plebbit: Plebbit, propsToCheckFor: Partial<CommentType>, checkInAllPages?: boolean): Promise<void>;
export declare function createMockSub(props: CreateSubplebbitOptions, plebbit: Plebbit, syncInterval?: number): Promise<Subplebbit>;
