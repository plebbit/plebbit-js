import type { StorageInterface, ChainProvider, GatewayClient, IpfsClient, PlebbitEvents, PubsubClient, ParsedPlebbitOptions, LRUStorageInterface, LRUStorageConstructor, InputPlebbitOptions } from "../types.js";
import { Comment } from "../publications/comment/comment.js";
import Vote from "../publications/vote/vote.js";
import { CommentEdit } from "../publications/comment-edit/comment-edit.js";
import { TypedEmitter } from "tiny-typed-emitter";
import Stats from "../stats.js";
import { ClientsManager } from "../clients/client-manager.js";
import PlebbitRpcClient from "../clients/rpc-client/plebbit-rpc-client.js";
import type { CreateRemoteSubplebbitOptions, SubplebbitJson, SubplebbitIpfsType, RemoteSubplebbitJson, RpcRemoteSubplebbitJson } from "../subplebbit/types.js";
import { RemoteSubplebbit } from "../subplebbit/remote-subplebbit.js";
import { RpcRemoteSubplebbit } from "../subplebbit/rpc-remote-subplebbit.js";
import { RpcLocalSubplebbit } from "../subplebbit/rpc-local-subplebbit.js";
import { LocalSubplebbit } from "../runtime/browser/subplebbit/local-subplebbit.js";
import { z } from "zod";
import type { CreateSignerOptions } from "../signer/types.js";
import type { CommentEditPubsubMessagePublication, CommentEditTypeJson, CreateCommentEditOptions } from "../publications/comment-edit/types.js";
import type { CreateVoteOptions, VoteJson, VotePubsubMessagePublication } from "../publications/vote/types.js";
import type { CommentIpfsType, CommentIpfsWithCidDefined, CommentJson, CommentPubsubMessagePublication, CommentUpdateType, CommentWithinPageJson, CreateCommentOptions } from "../publications/comment/types.js";
import { CidStringSchema, SubplebbitAddressSchema } from "../schema/schema.js";
import { CreateSubplebbitFunctionArgumentsSchema } from "../subplebbit/schema.js";
import { CommentModeration } from "../publications/comment-moderation/comment-moderation.js";
import type { CommentModerationPubsubMessagePublication, CommentModerationTypeJson, CreateCommentModerationOptions } from "../publications/comment-moderation/types.js";
export declare class Plebbit extends TypedEmitter<PlebbitEvents> implements ParsedPlebbitOptions {
    ipfsGatewayUrls: ParsedPlebbitOptions["ipfsGatewayUrls"];
    ipfsHttpClientsOptions?: ParsedPlebbitOptions["ipfsHttpClientsOptions"];
    pubsubHttpClientsOptions: ParsedPlebbitOptions["pubsubHttpClientsOptions"];
    plebbitRpcClientsOptions?: ParsedPlebbitOptions["plebbitRpcClientsOptions"];
    dataPath?: ParsedPlebbitOptions["dataPath"];
    browserLibp2pJsPublish: ParsedPlebbitOptions["browserLibp2pJsPublish"];
    resolveAuthorAddresses: ParsedPlebbitOptions["resolveAuthorAddresses"];
    chainProviders: ParsedPlebbitOptions["chainProviders"];
    parsedPlebbitOptions: ParsedPlebbitOptions;
    publishInterval: ParsedPlebbitOptions["publishInterval"];
    updateInterval: ParsedPlebbitOptions["updateInterval"];
    noData: ParsedPlebbitOptions["noData"];
    userAgent: ParsedPlebbitOptions["userAgent"];
    subplebbits: string[];
    clients: {
        ipfsGateways: {
            [ipfsGatewayUrl: string]: GatewayClient;
        };
        ipfsClients: {
            [ipfsClientUrl: string]: IpfsClient;
        };
        pubsubClients: {
            [pubsubClientUrl: string]: PubsubClient;
        };
        chainProviders: {
            [chainProviderUrl: string]: ChainProvider;
        };
        plebbitRpcClients: {
            [plebbitRpcUrl: string]: PlebbitRpcClient;
        };
    };
    _plebbitRpcClient?: PlebbitRpcClient;
    private _pubsubSubscriptions;
    _clientsManager: ClientsManager;
    _userPlebbitOptions: InputPlebbitOptions;
    _stats: Stats;
    _storage: StorageInterface;
    private _subplebbitFsWatchAbort?;
    private _subplebbitschangeEventHasbeenEmitted;
    private _storageLRUs;
    constructor(options: InputPlebbitOptions);
    private _initIpfsClientsIfNeeded;
    private _initPubsubClientsIfNeeded;
    private _initRpcClientsIfNeeded;
    private _initChainProviders;
    private _initIpfsGatewaysIfNeeded;
    _init(): Promise<void>;
    getSubplebbit(subplebbitAddress: z.infer<typeof SubplebbitAddressSchema>): Promise<RemoteSubplebbit>;
    getComment(cid: z.infer<typeof CidStringSchema>): Promise<Comment>;
    private _initMissingFieldsOfPublicationBeforeSigning;
    private _createCommentInstanceFromAnotherCommentInstance;
    private _createCommentInstanceFromJsonfiedPageComment;
    private _createCommentInstanceFromJsonfiedCommentInstance;
    createComment(options: CommentIpfsType | CommentPubsubMessagePublication | {
        cid: CommentUpdateType["cid"];
        subplebbitAddress?: CommentPubsubMessagePublication["subplebbitAddress"];
    } | CreateCommentOptions | CommentJson | Comment | CommentWithinPageJson | CommentIpfsWithCidDefined): Promise<Comment>;
    _canCreateNewLocalSub(): boolean;
    protected _setSubplebbitIpfsOnInstanceIfPossible(subplebbit: RpcRemoteSubplebbit | RemoteSubplebbit, options: CreateRemoteSubplebbitOptions | SubplebbitIpfsType | RemoteSubplebbitJson | RpcRemoteSubplebbitJson): Promise<void>;
    protected _waitForSubplebbitsToBeDefined(): Promise<void>;
    _awaitSubplebbitsToIncludeSub(subAddress: string): Promise<void>;
    private _createRemoteSubplebbitInstance;
    private _createLocalSub;
    private _createSubInstanceFromJsonifiedSub;
    createSubplebbit(options?: z.infer<typeof CreateSubplebbitFunctionArgumentsSchema> | SubplebbitJson): Promise<RemoteSubplebbit | RpcRemoteSubplebbit | RpcLocalSubplebbit | LocalSubplebbit>;
    _createVoteInstanceFromJsonfiedVote(jsonfied: VoteJson): Promise<Vote>;
    createVote(options: CreateVoteOptions | VotePubsubMessagePublication | VoteJson): Promise<Vote>;
    _createCommentEditInstanceFromJsonfiedCommentEdit(jsonfied: CommentEditTypeJson): Promise<CommentEdit>;
    createCommentEdit(options: CreateCommentEditOptions | CommentEditPubsubMessagePublication | CommentEditTypeJson): Promise<CommentEdit>;
    _createCommentModerationInstanceFromJsonfiedCommentModeration(jsonfied: CommentModerationTypeJson): Promise<CommentModeration>;
    createCommentModeration(options: CreateCommentModerationOptions | CommentModerationPubsubMessagePublication | CommentModerationTypeJson): Promise<CommentModeration>;
    createSigner(createSignerOptions?: CreateSignerOptions): Promise<import("../signer/index.js").SignerWithPublicKeyAddress>;
    fetchCid(cid: string): Promise<string>;
    pubsubSubscribe(pubsubTopic: string): Promise<void>;
    pubsubUnsubscribe(pubsubTopic: string): Promise<void>;
    resolveAuthorAddress(authorAddress: string): Promise<string | null>;
    _createStorageLRU(opts: Omit<LRUStorageConstructor, "plebbit">): Promise<LRUStorageInterface>;
    destroy(): Promise<void>;
}
