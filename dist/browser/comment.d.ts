import Publication from "./publication.js";
import { RepliesPages } from "./pages.js";
import { AuthorCommentEdit, CommentIpfsType, CommentIpfsWithCid, CommentPubsubMessage, CommentsTableRowInsert, CommentType, CommentUpdate, CommentWithCommentUpdate, ProtocolVersion, PublicationTypeName } from "./types.js";
import { Plebbit } from "./plebbit.js";
import { CommentClientsManager } from "./clients/client-manager.js";
import { Flair } from "./subplebbit/types.js";
export declare class Comment extends Publication implements Omit<CommentType, "replies"> {
    shortCid?: string;
    clients: CommentClientsManager["clients"];
    title?: string;
    link?: string;
    linkWidth?: number;
    linkHeight?: number;
    thumbnailUrl?: string;
    thumbnailUrlWidth?: number;
    thumbnailUrlHeight?: number;
    protocolVersion: ProtocolVersion;
    cid?: string;
    parentCid?: string;
    content?: string;
    previousCid?: string;
    depth?: number;
    postCid?: string;
    original?: CommentType["original"];
    upvoteCount?: number;
    downvoteCount?: number;
    replyCount?: number;
    updatedAt?: number;
    replies: RepliesPages;
    edit?: AuthorCommentEdit;
    flair?: Flair;
    deleted?: CommentType["edit"]["deleted"];
    spoiler?: boolean;
    pinned?: boolean;
    locked?: boolean;
    removed?: boolean;
    reason?: string;
    lastChildCid?: string;
    lastReplyTimestamp?: number;
    updatingState: "stopped" | "resolving-author-address" | "fetching-ipfs" | "fetching-update-ipfs" | "resolving-subplebbit-address" | "fetching-subplebbit-ipns" | "fetching-subplebbit-ipfs" | "failed" | "succeeded";
    private _updateInterval?;
    private _isUpdating;
    private _rawCommentUpdate?;
    private _rawCommentIpfs?;
    private _loadingOperation;
    _clientsManager: CommentClientsManager;
    private _updateRpcSubscriptionId?;
    constructor(props: CommentType, plebbit: Plebbit);
    _initClients(): void;
    _initProps(props: Omit<CommentType, "shortSubplebbitAddress">): void;
    _initCommentUpdate(props: CommentUpdate): Promise<void>;
    getType(): PublicationTypeName;
    toJSON(): CommentType;
    toJSONPagesIpfs(commentUpdate: CommentUpdate): {
        comment: CommentIpfsWithCid;
        update: CommentUpdate;
    };
    toJSONIpfs(): CommentIpfsType;
    toJSONPubsubMessagePublication(): CommentPubsubMessage;
    toJSONAfterChallengeVerification(): CommentIpfsWithCid;
    toJSONCommentsTableRowInsert(publicationHash: CommentsTableRowInsert["challengeRequestPublicationSha256"], authorSignerAddress: string): CommentsTableRowInsert;
    toJSONMerged(): CommentWithCommentUpdate;
    setPostCid(newPostCid: string): void;
    setCid(newCid: string): void;
    setPreviousCid(newPreviousCid?: string): void;
    setDepth(newDepth: number): void;
    setUpdatedAt(newUpdatedAt: number): void;
    private _retryLoadingCommentIpfs;
    private _retryLoadingCommentUpdate;
    updateOnce(): Promise<void>;
    _setUpdatingState(newState: Comment["updatingState"]): void;
    protected _setRpcClientState(newState: Comment["clients"]["plebbitRpcClients"][""]["state"]): void;
    protected _updateRpcClientStateFromUpdatingState(updatingState: Comment["updatingState"]): void;
    private _isCriticalRpcError;
    update(): Promise<void>;
    private _stopUpdateLoop;
    stop(): Promise<void>;
    private _validateSignature;
    publish(): Promise<void>;
}
