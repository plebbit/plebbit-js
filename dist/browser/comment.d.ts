import Publication from "./publication";
import { Pages } from "./pages";
import { AuthorCommentEdit, CommentIpfsType, CommentIpfsWithCid, CommentPubsubMessage, CommentsTableRowInsert, CommentType, CommentUpdate, CommentWithCommentUpdate, Flair, ProtocolVersion, PublicationTypeName } from "./types";
import { Plebbit } from "./plebbit";
export declare class Comment extends Publication implements Omit<CommentType, "replies"> {
    title?: string;
    link?: string;
    thumbnailUrl?: string;
    protocolVersion: ProtocolVersion;
    cid?: string;
    shortCid?: string;
    parentCid?: string;
    content?: string;
    ipnsKeyName?: string;
    previousCid?: string;
    ipnsName?: string;
    depth?: number;
    postCid?: string;
    original?: Pick<Partial<CommentType>, "author" | "content" | "flair" | "protocolVersion">;
    upvoteCount?: number;
    downvoteCount?: number;
    replyCount?: number;
    updatedAt?: number;
    replies: Pages;
    edit?: AuthorCommentEdit;
    flair?: Flair;
    deleted?: CommentType["edit"]["deleted"];
    spoiler?: boolean;
    pinned?: boolean;
    locked?: boolean;
    removed?: boolean;
    reason?: string;
    private _updateInterval?;
    private _updateIntervalMs;
    private _rawCommentUpdate?;
    constructor(props: CommentType, plebbit: Plebbit);
    _initProps(props: CommentType): void;
    _initCommentUpdate(props: CommentUpdate): Promise<void>;
    getType(): PublicationTypeName;
    toJSON(): CommentType;
    toJSONPagesIpfs(commentUpdate: CommentUpdate): {
        comment: CommentIpfsWithCid;
        update: CommentUpdate;
    };
    toJSONIpfs(): CommentIpfsType;
    toJSONPubsubMessagePublication(): CommentPubsubMessage;
    toJSONAfterChallengeVerification(): CommentIpfsWithCid;
    toJSONCommentsTableRowInsert(challengeRequestId: string): CommentsTableRowInsert;
    toJSONMerged(): CommentWithCommentUpdate;
    setCommentIpnsKey(ipnsKey: {
        Id: string;
        Name: string;
    }): void;
    setPostCid(newPostCid: string): void;
    setCid(newCid: string): void;
    setPreviousCid(newPreviousCid?: string): void;
    setDepth(newDepth: number): void;
    setUpdatedAt(newUpdatedAt: number): void;
    updateOnce(): Promise<void>;
    update(): Promise<void>;
    stop(): void;
    private _validateSignature;
    publish(): Promise<void>;
}
