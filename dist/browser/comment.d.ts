import Publication from "./publication";
import { Pages } from "./pages";
import { AuthorCommentEdit, CommentForDbType, CommentIpfsType, CommentType, CommentUpdate, Flair, PagesType, ProtocolVersion, PublicationTypeName } from "./types";
import { Plebbit } from "./plebbit";
export declare class Comment extends Publication implements CommentType {
    title?: string;
    link?: string;
    thumbnailUrl?: string;
    protocolVersion: ProtocolVersion;
    cid?: string;
    parentCid?: string;
    content?: string;
    ipnsKeyName?: string;
    previousCid?: string;
    ipnsName?: string;
    depth?: number;
    postCid?: string;
    original?: Pick<Partial<CommentType>, "author" | "content" | "flair">;
    upvoteCount?: number;
    downvoteCount?: number;
    replyCount?: number;
    updatedAt?: number;
    replies: Pages;
    authorEdit?: AuthorCommentEdit;
    flair?: Flair;
    deleted?: boolean;
    spoiler?: boolean;
    pinned?: boolean;
    locked?: boolean;
    removed?: boolean;
    moderatorReason?: string;
    private _updateInterval?;
    constructor(props: CommentType, plebbit: Plebbit);
    _initProps(props: CommentType): void;
    _initCommentUpdate(props: CommentType | CommentUpdate): void;
    _mergeFields(props: CommentType): void;
    getType(): PublicationTypeName;
    toJSON(): CommentType;
    toJSONPages(): CommentType;
    toJSONIpfs(): CommentIpfsType;
    toJSONSkeleton(): {
        content: string;
        parentCid: string;
        flair: Flair;
        spoiler: boolean;
        link: string;
        author: import("./types").AuthorType;
        signature: import("./types").SignatureType;
        protocolVersion: "1.0.0";
        subplebbitAddress: string;
        timestamp: number;
    };
    toJSONForDb(challengeRequestId?: string): CommentForDbType;
    toJSONCommentUpdate(skipAssert?: boolean): Omit<CommentUpdate, "signature">;
    setCommentIpnsKey(ipnsKey: {
        Id: string;
        Name: string;
    }): void;
    setPostCid(newPostCid: string): void;
    setCid(newCid: string): void;
    setPreviousCid(newPreviousCid?: string): void;
    setDepth(newDepth: number): void;
    setUpdatedAt(newUpdatedAt: number): void;
    setReplies(replies?: Pages | PagesType): void;
    updateOnce(): Promise<void>;
    update(updateIntervalMs?: number): Promise<void>;
    stop(): void;
    edit(options: CommentUpdate): Promise<void>;
    publish(userOptions: any): Promise<void>;
}
