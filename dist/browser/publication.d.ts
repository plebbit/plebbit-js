import Author from "./author";
import { Signer } from "./signer";
import { DecryptedChallengeRequest, ProtocolVersion, PublicationEvents, PublicationType, PublicationTypeName } from "./types";
import { Plebbit } from "./plebbit";
import { TypedEmitter } from "tiny-typed-emitter";
import { CommentClientsManager, PublicationClientsManager } from "./clients/client-manager";
import { JsonSignature } from "./signer/constants";
import { SubplebbitIpfsType } from "./subplebbit/types";
declare class Publication extends TypedEmitter<PublicationEvents> implements PublicationType {
    clients: PublicationClientsManager["clients"];
    subplebbitAddress: string;
    shortSubplebbitAddress: string;
    timestamp: number;
    signature: JsonSignature;
    signer: Signer;
    author: Author;
    protocolVersion: ProtocolVersion;
    state: "stopped" | "updating" | "publishing";
    publishingState: "stopped" | "resolving-subplebbit-address" | "fetching-subplebbit-ipns" | "fetching-subplebbit-ipfs" | "publishing-challenge-request" | "waiting-challenge" | "waiting-challenge-answers" | "publishing-challenge-answer" | "waiting-challenge-verification" | "failed" | "succeeded";
    challengeAnswers?: string[];
    challengeCommentCids?: string[];
    protected subplebbit?: Pick<SubplebbitIpfsType, "encryption" | "pubsubTopic" | "address">;
    private _challengeAnswer;
    private _publishedChallengeRequests;
    private _challengeIdToPubsubSigner;
    private _pubsubProviders;
    private _pubsubProvidersDoneWaiting;
    private _currentPubsubProviderIndex;
    private _receivedChallengeFromSub;
    private _receivedChallengeVerification;
    private _challenge?;
    private _publishToDifferentProviderThresholdSeconds;
    private _setProviderFailureThresholdSeconds;
    private _rpcPublishSubscriptionId?;
    _clientsManager: PublicationClientsManager | CommentClientsManager;
    _plebbit: Plebbit;
    constructor(props: PublicationType, plebbit: Plebbit);
    protected _initClients(): void;
    _initProps(props: PublicationType): void;
    protected getType(): PublicationTypeName;
    toJSONPubsubMessagePublication(): PublicationType;
    toJSONPubsubMessage(): DecryptedChallengeRequest;
    private _handleRpcChallenge;
    private _handleRpcChallengeVerification;
    private _handleRpcChallengeAnswer;
    private handleChallengeExchange;
    publishChallengeAnswers(challengeAnswers: string[]): Promise<void>;
    private _validatePublicationFields;
    private _validateSubFields;
    _updatePublishingState(newState: Publication["publishingState"]): void;
    private _updateRpcClientStateFromPublishingState;
    protected _updateState(newState: Publication["state"]): void;
    protected _setRpcClientState(newState: Publication["clients"]["plebbitRpcClients"][""]["state"]): void;
    private _pubsubTopicWithfallback;
    _getSubplebbitCache(): Pick<SubplebbitIpfsType, "address" | "encryption" | "pubsubTopic">;
    stop(): Promise<void>;
    _isAllAttemptsExhausted(): boolean;
    _setProviderToFailIfNoResponse(providerIndex: number): void;
    private _postSucessOrFailurePublishing;
    publish(): Promise<void>;
}
export default Publication;
