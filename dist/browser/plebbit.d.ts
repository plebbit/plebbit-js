import { CreateSignerOptions, CreateSubplebbitOptions } from "./types";
import { Comment, CommentEdit } from "./comment";
import Post from "./post";
import { Subplebbit } from "./subplebbit";
import Vote from "./vote";
import { IPFSHTTPClient } from "ipfs-http-client";
import { Signer } from "./signer";
import { Resolver } from "./resolver";
import TinyCache from "tinycache";
export declare class Plebbit {
    ipfsHttpClientOptions: string | any;
    ipfsGatewayUrl: string;
    pubsubHttpClientOptions: string | any;
    ipfsClient: IPFSHTTPClient | undefined;
    pubsubIpfsClient: IPFSHTTPClient;
    dataPath: string | undefined;
    resolver: Resolver;
    _memCache: TinyCache;
    constructor(options?: {});
    _init(options?: {}): Promise<void>;
    getSubplebbit(subplebbitAddress: string): Promise<Subplebbit>;
    getComment(cid: string): Promise<Comment | Post>;
    signPublication(createPublicationOptions: any): Promise<any>;
    defaultTimestampIfNeeded(createPublicationOptions: any): any;
    createComment(createCommentOptions: any): Promise<Comment | Post>;
    createSubplebbit(options: CreateSubplebbitOptions): Promise<Subplebbit>;
    createVote(createVoteOptions: any): Promise<Vote>;
    createCommentEdit(createCommentEditOptions: any): Promise<CommentEdit>;
    createSigner(createSignerOptions?: CreateSignerOptions): Promise<Signer>;
    listSubplebbits(): Promise<string[]>;
}
