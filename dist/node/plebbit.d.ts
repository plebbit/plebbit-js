import type { StorageInterface, ChainProvider, GatewayClient, IpfsClient, PlebbitEvents, PubsubClient, ParsedPlebbitOptions, LRUStorageInterface, LRUStorageConstructor, InputPlebbitOptions } from "./types.js";
import { Comment } from "./publications/comment/comment.js";
import Vote from "./publications/vote/vote.js";
import { CommentEdit } from "./publications/comment-edit/comment-edit.js";
import { TypedEmitter } from "tiny-typed-emitter";
import Stats from "./stats.js";
import { ClientsManager } from "./clients/client-manager.js";
import PlebbitRpcClient from "./clients/rpc-client/plebbit-rpc-client.js";
import { GenericPlebbitRpcStateClient } from "./clients/rpc-client/plebbit-rpc-state-client.js";
import type { SubplebbitJson } from "./subplebbit/types.js";
import { RemoteSubplebbit } from "./subplebbit/remote-subplebbit.js";
import { RpcRemoteSubplebbit } from "./subplebbit/rpc-remote-subplebbit.js";
import { RpcLocalSubplebbit } from "./subplebbit/rpc-local-subplebbit.js";
import { LocalSubplebbit } from "./runtime/node/subplebbit/local-subplebbit.js";
import { z } from "zod";
import type { CreateSignerOptions } from "./signer/types.js";
import type { CommentEditTypeJson } from "./publications/comment-edit/types.js";
import { CreateCommentEditFunctionArgumentSchema } from "./publications/comment-edit/schema.js";
import type { VoteJson } from "./publications/vote/types.js";
import { CreateVoteFunctionArgumentSchema } from "./publications/vote/schema.js";
import type { CommentJson, CommentWithinPageJson } from "./publications/comment/types.js";
import { CreateCommentFunctionArguments } from "./publications/comment/schema.js";
import { CidStringSchema, SubplebbitAddressSchema } from "./schema/schema.js";
import { CreateSubplebbitFunctionArgumentsSchema } from "./subplebbit/schema.js";
export declare class Plebbit extends TypedEmitter<PlebbitEvents> implements ParsedPlebbitOptions {
    plebbitRpcClient?: PlebbitRpcClient;
    ipfsGatewayUrls: ParsedPlebbitOptions["ipfsGatewayUrls"];
    ipfsHttpClientsOptions?: ParsedPlebbitOptions["ipfsHttpClientsOptions"];
    pubsubHttpClientsOptions: ParsedPlebbitOptions["pubsubHttpClientsOptions"];
    plebbitRpcClientsOptions?: ParsedPlebbitOptions["plebbitRpcClientsOptions"];
    dataPath?: ParsedPlebbitOptions["dataPath"];
    browserLibp2pJsPublish: ParsedPlebbitOptions["browserLibp2pJsPublish"];
    resolveAuthorAddresses: ParsedPlebbitOptions["resolveAuthorAddresses"];
    chainProviders: ParsedPlebbitOptions["chainProviders"];
    parsedPlebbitOptions: ParsedPlebbitOptions;
    publishInterval: ParsedPlebbitOptions["publishInterval"];
    updateInterval: ParsedPlebbitOptions["updateInterval"];
    noData: ParsedPlebbitOptions["noData"];
    userAgent: ParsedPlebbitOptions["userAgent"];
    clients: {
        ipfsGateways: {
            [ipfsGatewayUrl: string]: GatewayClient;
        };
        ipfsClients: {
            [ipfsClientUrl: string]: IpfsClient;
        };
        pubsubClients: {
            [pubsubClientUrl: string]: PubsubClient;
        };
        chainProviders: {
            [chainProviderUrl: string]: ChainProvider;
        };
        plebbitRpcClients: {
            [plebbitRpcUrl: string]: GenericPlebbitRpcStateClient;
        };
    };
    private _pubsubSubscriptions;
    _clientsManager: ClientsManager;
    private _userPlebbitOptions;
    _stats: Stats;
    _storage: StorageInterface;
    private _storageLRUs;
    constructor(options: InputPlebbitOptions);
    private _initIpfsClientsIfNeeded;
    private _initPubsubClientsIfNeeded;
    private _initRpcClientsIfNeeded;
    private _initChainProviders;
    private _initIpfsGatewaysIfNeeded;
    _init(): Promise<void>;
    getSubplebbit(subplebbitAddress: z.infer<typeof SubplebbitAddressSchema>): Promise<RemoteSubplebbit>;
    getComment(cid: z.infer<typeof CidStringSchema>): Promise<Comment>;
    private _initMissingFieldsOfPublicationBeforeSigning;
    private _createCommentInstanceFromAnotherCommentInstance;
    private _createCommentInstanceFromJsonfiedPageComment;
    private _createCommentInstanceFromJsonfiedCommentInstance;
    createComment(options: z.infer<typeof CreateCommentFunctionArguments> | CommentJson | Comment | CommentWithinPageJson): Promise<Comment>;
    _canCreateNewLocalSub(): boolean;
    private _setSubplebbitIpfsOnInstanceIfPossible;
    private _createSubplebbitRpc;
    private _createRemoteSubplebbitInstance;
    private _createLocalSub;
    private _createSubInstanceFromJsonifiedSub;
    createSubplebbit(options?: z.infer<typeof CreateSubplebbitFunctionArgumentsSchema> | SubplebbitJson): Promise<RemoteSubplebbit | RpcRemoteSubplebbit | RpcLocalSubplebbit | LocalSubplebbit>;
    _createVoteInstanceFromJsonfiedVote(jsonfied: VoteJson): Promise<Vote>;
    createVote(options: z.infer<typeof CreateVoteFunctionArgumentSchema> | VoteJson): Promise<Vote>;
    _createCommentEditInstanceFromJsonfiedCommentEdit(jsonfied: CommentEditTypeJson): Promise<CommentEdit>;
    createCommentEdit(options: z.infer<typeof CreateCommentEditFunctionArgumentSchema> | CommentEditTypeJson): Promise<CommentEdit>;
    createSigner(createSignerOptions?: CreateSignerOptions): Promise<import("./signer/index.js").SignerWithPublicKeyAddress>;
    listSubplebbits(): Promise<string[]>;
    fetchCid(cid: string): Promise<string>;
    pubsubSubscribe(pubsubTopic: string): Promise<void>;
    pubsubUnsubscribe(pubsubTopic: string): Promise<void>;
    resolveAuthorAddress(authorAddress: string): Promise<string | null>;
    _createStorageLRU(opts: Omit<LRUStorageConstructor, "plebbit">): Promise<LRUStorageInterface>;
    rpcCall(method: string, params: any[]): Promise<any>;
    destroy(): Promise<void>;
}
