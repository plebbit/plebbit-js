import Publication from "./publication";
import { Pages } from "./pages";
import { Signature } from "./signer";
import { CommentUpdate, CreateCommentOptions, Flair } from "./types";
export declare class Comment extends Publication implements CommentUpdate, CreateCommentOptions {
    flair?: Flair | undefined;
    authorBanExpiresAt?: number | undefined;
    authorFlair?: Flair | undefined;
    protocolVersion: "1.0.0";
    postCid?: string;
    cid?: string;
    parentCid?: string;
    ipnsName?: string;
    ipnsKeyName?: string;
    depth?: number;
    upvoteCount?: number;
    downvoteCount?: number;
    replyCount?: number;
    updatedAt?: number;
    replies?: Pages;
    originalContent?: string;
    content?: string;
    editSignature?: Signature;
    editTimestamp?: number;
    editReason?: string;
    deleted?: boolean;
    spoiler?: boolean;
    pinned?: boolean;
    locked?: boolean;
    removed?: boolean;
    moderatorReason?: string;
    previousCid?: string;
    private _updateInterval?;
    _initProps(props: any): void;
    _initCommentUpdate(props: CommentUpdate): void;
    toJSON(): {
        cid: string;
        originalContent: string;
        updatedAt: number;
        editSignature: Signature;
        editTimestamp: number;
        editReason: string;
        deleted: boolean;
        spoiler: boolean;
        pinned: boolean;
        locked: boolean;
        removed: boolean;
        moderatorReason: string;
        authorBansExpiresAt: number;
        protocolVersion: "1.0.0";
        content: string;
        replyCount: number;
        upvoteCount: number;
        downvoteCount: number;
        replies: Pages;
        previousCid: string;
        ipnsName: string;
        postCid: string;
        depth: number;
        parentCid: string;
        subplebbitAddress: string;
        timestamp: number;
        signature: Signature;
        author: import("./author").default;
    };
    toJSONIpfs(): {
        previousCid: string;
        ipnsName: string;
        postCid: string;
        depth: number;
        content: string;
        parentCid: string;
        subplebbitAddress: string;
        timestamp: number;
        signature: Signature;
        author: import("./author").default;
    };
    toJSONSkeleton(): {
        content: string;
        parentCid: string;
        subplebbitAddress: string;
        timestamp: number;
        signature: Signature;
        author: import("./author").default;
    };
    toJSONForDb(challengeRequestId: string): any;
    toJSONCommentUpdate(): {
        updatedAt: number;
        editSignature: Signature;
        editTimestamp: number;
        editReason: string;
        deleted: boolean;
        spoiler: boolean;
        pinned: boolean;
        locked: boolean;
        removed: boolean;
        moderatorReason: string;
        authorBansExpiresAt: number;
        protocolVersion: "1.0.0";
        content: string;
        replyCount: number;
        upvoteCount: number;
        downvoteCount: number;
        replies: Pages;
    };
    setCommentIpnsKey(ipnsKey: any): void;
    setPostCid(newPostCid: string): void;
    setCid(newCid: string): void;
    setPreviousCid(newPreviousCid?: string): void;
    setDepth(newDepth: number): void;
    setUpdatedAt(newUpdatedAt: number): void;
    setOriginalContent(newOriginalContent: string): void;
    setReplies(replies?: Pages): void;
    updateOnce(): Promise<this>;
    update(updateIntervalMs?: number): Promise<this>;
    stop(): void;
    edit(commentUpdateOptions: CommentUpdate): Promise<void>;
    publish(userOptions: any): Promise<void>;
}
export declare class CommentEdit extends Comment {
    commentCid: string;
    _initProps(props: any): void;
    toJSON(): {
        commentCid: string;
        cid: string;
        originalContent: string;
        updatedAt: number;
        editSignature: Signature;
        editTimestamp: number;
        editReason: string;
        deleted: boolean;
        spoiler: boolean;
        pinned: boolean;
        locked: boolean;
        removed: boolean;
        moderatorReason: string;
        authorBansExpiresAt: number;
        protocolVersion: "1.0.0";
        content: string;
        replyCount: number;
        upvoteCount: number;
        downvoteCount: number;
        replies: Pages;
        previousCid: string;
        ipnsName: string;
        postCid: string;
        depth: number;
        parentCid: string;
        subplebbitAddress: string;
        timestamp: number;
        signature: Signature;
        author: import("./author").default;
    };
    toJSONForDb(challengeRequestId: string): any;
    publish(userOptions: any): Promise<void>;
}
