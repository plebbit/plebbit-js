import { messages } from "./errors.js";
import type { SubplebbitIpfsType } from "./subplebbit/types.js";
import type { IpfsClient } from "./types.js";
import type { create as CreateKuboRpcClient } from "kubo-rpc-client";
export declare function timestamp(): number;
export declare function replaceXWithY(obj: Record<string, any>, x: any, y: any): any;
export declare function removeNullUndefinedValues<T extends Object>(obj: T): T extends Record<keyof T, T[keyof T]> ? T : Partial<T>;
export declare function removeUndefinedValuesRecursively<T>(obj: T): T;
export declare function removeNullUndefinedEmptyObjectsValuesRecursively<T>(obj: T): T;
export declare function throwWithErrorCode(code: keyof typeof messages, details?: {}): void;
export declare const parseDbResponses: (obj: any) => any;
export declare function shortifyAddress(address: string): string;
export declare function shortifyCid(cid: string): string;
export declare function delay(ms: number): Promise<void>;
export declare function firstResolve<T>(promises: Promise<T>[]): Promise<T>;
export declare function getErrorCodeFromMessage(message: string): keyof typeof messages;
export declare function doesDomainAddressHaveCapitalLetter(domainAddress: string): boolean;
export declare function getPostUpdateTimestampRange(postUpdates: SubplebbitIpfsType["postUpdates"], postTimestamp: number): string[];
export declare function isLinkValid(link: string): boolean;
export declare function isLinkOfMedia(link: string): boolean;
export declare function genToArray<T>(gen: AsyncIterable<T>): Promise<T[]>;
export declare function isStringDomain(x: string | undefined): boolean;
export declare function isIpns(x: string): boolean;
export declare function isIpfsCid(x: string): boolean;
export declare function isIpfsPath(x: string): boolean;
export declare function parseIpfsRawOptionToIpfsOptions(ipfsRawOption: Parameters<typeof CreateKuboRpcClient>[0]): IpfsClient["_clientOptions"];
export declare function hideClassPrivateProps(_this: any): void;
