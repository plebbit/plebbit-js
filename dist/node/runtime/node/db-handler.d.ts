import { ChallengeMessage, ChallengeRequestMessage, ChallengeAnswerMessage, ChallengeVerificationMessage } from "../../challenge";
import Post from "../../post";
import Author from "../../author";
import { Comment } from "../../comment";
import Vote from "../../vote";
import { Knex } from "knex";
import { Subplebbit } from "../../subplebbit";
import { Signer } from "../../signer";
import Transaction = Knex.Transaction;
import { AuthorType, SubplebbitMetrics } from "../../types";
import { CommentEdit } from "../../comment-edit";
export declare class DbHandler {
    private knex;
    private subplebbit;
    private _currentTrxs;
    constructor(subplebbit: Subplebbit);
    destoryConnection(): Promise<void>;
    createTransaction(transactionId: string): Promise<Transaction>;
    commitTransaction(transactionId: string): Promise<void>;
    rollbackTransaction(transactionId: string): Promise<void>;
    private _baseTransaction;
    private _createCommentsTable;
    private _createVotesTable;
    private _createAuthorsTable;
    private _createChallengesTable;
    private _createSignersTable;
    private _createEditsTable;
    getDbVersion(): Promise<number>;
    createTablesIfNeeded(): Promise<void>;
    private _copyTable;
    private _upsertAuthor;
    updateAuthor(newAuthorProps: AuthorType, updateCommentsAuthor?: boolean, trx?: Transaction): Promise<void>;
    queryAuthor(authorAddress: string, trx?: Transaction): Promise<Author | undefined>;
    upsertVote(vote: Vote, challengeRequestId: string, trx?: Transaction): Promise<void>;
    upsertComment(postOrComment: Post | Comment, challengeRequestId?: string, trx?: Transaction): Promise<void>;
    insertEdit(edit: CommentEdit, challengeRequestId: string, trx?: Transaction): Promise<void>;
    queryEditsSorted(commentCid: string, editor?: "author" | "mod", trx?: Transaction): Promise<CommentEdit[]>;
    editComment(edit: CommentEdit, challengeRequestId: string, trx?: Transaction): Promise<void>;
    upsertChallenge(challenge: ChallengeRequestMessage | ChallengeMessage | ChallengeAnswerMessage | ChallengeVerificationMessage, trx?: Transaction): Promise<void>;
    getLastVoteOfAuthor(commentCid: string, authorAddress: string, trx?: Transaction): Promise<Vote | undefined>;
    private _baseCommentQuery;
    private _createCommentsFromRows;
    private _createEditsFromRows;
    private _createVotesFromRows;
    queryCommentsSortedByTimestamp(parentCid: string | undefined | null, order?: string, trx?: Transaction): Promise<Comment[] | Post[]>;
    queryCommentsBetweenTimestampRange(parentCid: string | undefined | null, timestamp1: number, timestamp2: number, trx?: Transaction): Promise<Comment[] | Post[]>;
    queryTopCommentsBetweenTimestampRange(parentCid: string | undefined | null, timestamp1: number, timestamp2: number, trx?: Transaction): Promise<Comment[] | Post[]>;
    queryCommentsUnderComment(parentCid: string | undefined | null, trx?: Transaction): Promise<Comment[] | Post[]>;
    queryParentsOfComment(comment: Comment, trx?: Transaction): Promise<Comment[]>;
    queryComments(trx?: Transaction): Promise<Comment[] | Post[]>;
    querySubplebbitMetrics(trx?: Transaction): Promise<SubplebbitMetrics>;
    queryComment(cid: string, trx?: Transaction): Promise<Comment | Post | undefined>;
    queryLatestPost(trx?: Transaction): Promise<Post | undefined>;
    insertSigner(signer: Signer, trx?: Transaction): Promise<void>;
    querySubplebbitSigner(trx?: Transaction): Promise<Signer>;
    querySigner(ipnsKeyName: string, trx?: Transaction): Promise<Signer | undefined>;
    queryCommentsGroupByDepth(trx?: Knex.Transaction): Promise<Comment[][]>;
    queryCountOfPosts(trx?: Knex.Transaction): Promise<number>;
    changeDbFilename(newDbFileName: string): Promise<void>;
}
export declare const subplebbitInitDbIfNeeded: (subplebbit: Subplebbit) => Promise<void>;
