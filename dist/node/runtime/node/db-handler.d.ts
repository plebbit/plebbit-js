import Post from "../../post";
import Author from "../../author";
import { Comment } from "../../comment";
import Vote from "../../vote";
import { Knex } from "knex";
import { Subplebbit } from "../../subplebbit";
import { Signer } from "../../signer";
import Transaction = Knex.Transaction;
import { AuthorDbType, ChallengeRequestMessageType, ChallengeVerificationMessageType, CommentEditForDbType, CommentForDbType, CommentType, DecryptedChallengeAnswerMessageType, DecryptedChallengeMessageType, SignerType, SubplebbitMetrics, VoteForDbType } from "../../types";
import { CommentEdit } from "../../comment-edit";
export declare class DbHandler {
    private _knex;
    private _subplebbit;
    private _currentTrxs;
    private _dbConfig;
    private _userDbConfig?;
    private _keyv;
    private _createdTables;
    constructor(subplebbit: Subplebbit);
    initDbIfNeeded(): Promise<void>;
    getDbConfig(): Knex.Config;
    keyvGet(key: string, options?: {
        raw?: false;
    }): Promise<any>;
    keyvSet(key: string, value: any, ttl?: number): Promise<true>;
    keyvDelete(key: string | string[]): Promise<boolean>;
    keyvHas(key: string): Promise<boolean>;
    destoryConnection(): Promise<void>;
    createTransaction(transactionId: string): Promise<Transaction>;
    commitTransaction(transactionId: string): Promise<void>;
    rollbackTransaction(transactionId: string): Promise<void>;
    private _baseTransaction;
    private _createCommentsTable;
    private _createVotesTable;
    private _createAuthorsTable;
    private _createChallengesTable;
    private _createSignersTable;
    private _createEditsTable;
    getDbVersion(): Promise<number>;
    createTablesIfNeeded(): Promise<void>;
    private _copyTable;
    private _upsertAuthor;
    updateAuthor(newAuthorProps: AuthorDbType, updateCommentsAuthor?: boolean, trx?: Transaction): Promise<void>;
    queryAuthor(authorAddress: string, trx?: Transaction): Promise<Author | undefined>;
    upsertVote(vote: VoteForDbType, author: AuthorDbType, trx?: Transaction): Promise<void>;
    upsertComment(comment: CommentForDbType, author: AuthorDbType, trx?: Transaction): Promise<void>;
    insertEdit(edit: CommentEditForDbType, trx?: Transaction): Promise<void>;
    queryEditsSorted(commentCid: string, editor?: "author" | "mod", trx?: Transaction): Promise<CommentEdit[]>;
    editComment(edit: CommentEditForDbType, trx?: Transaction): Promise<void>;
    upsertChallenge(challenge: Omit<ChallengeRequestMessageType, "encryptedPublication" | "signature"> | Omit<DecryptedChallengeMessageType, "encryptedChallenges" | "signature"> | Omit<DecryptedChallengeAnswerMessageType, "encryptedChallengeAnswers" | "signature"> | Omit<ChallengeVerificationMessageType, "encryptedPublication" | "signature">, trx?: Transaction): Promise<void>;
    getLastVoteOfAuthor(commentCid: string, authorAddress: string, trx?: Transaction): Promise<Vote | undefined>;
    private _baseCommentQuery;
    private _createCommentsFromRows;
    private _createEditsFromRows;
    private _createVotesFromRows;
    queryCommentsSortedByTimestamp(parentCid: string | undefined | null, order?: string, trx?: Transaction): Promise<Comment[] | Post[]>;
    queryCommentsBetweenTimestampRange(parentCid: string | undefined | null, timestamp1: number, timestamp2: number, trx?: Transaction): Promise<Comment[] | Post[]>;
    queryTopCommentsBetweenTimestampRange(parentCid: string | undefined | null, timestamp1: number, timestamp2: number, trx?: Transaction): Promise<Comment[] | Post[]>;
    queryCommentsUnderComment(parentCid: string | undefined | null, trx?: Transaction): Promise<Comment[] | Post[]>;
    queryParentsOfComment(comment: CommentType, trx?: Transaction): Promise<Comment[]>;
    queryComments(trx?: Transaction): Promise<Comment[] | Post[]>;
    querySubplebbitMetrics(trx?: Transaction): Promise<SubplebbitMetrics>;
    queryComment(cid: string, trx?: Transaction): Promise<Comment | Post | undefined>;
    queryLatestPost(trx?: Transaction): Promise<Post | undefined>;
    insertSigner(signer: SignerType, trx?: Transaction): Promise<void>;
    querySubplebbitSigner(trx?: Transaction): Promise<Signer>;
    querySigner(ipnsKeyName: string, trx?: Transaction): Promise<Signer | undefined>;
    queryCommentsGroupByDepth(trx?: Knex.Transaction): Promise<Comment[][]>;
    queryCountOfPosts(trx?: Knex.Transaction): Promise<number>;
    changeDbFilename(newDbFileName: string, newSubplebbit: Subplebbit): Promise<void>;
}
