import type { SubplebbitIpfsType, SubplebbitRole } from "../../../../../subplebbit/types.js";
import type { DecryptedChallengeRequestMessageTypeWithSubplebbitAuthor } from "../../../../../pubsub-messages/types.js";
declare const testScore: (excludeScore: number | undefined, authorScore: number | undefined) => boolean;
declare const testFirstCommentTimestamp: (excludeTime: number | undefined, authorFirstCommentTimestamp: number | undefined) => boolean;
declare const isVote: (request: DecryptedChallengeRequestMessageTypeWithSubplebbitAuthor) => boolean;
declare const isReply: (request: DecryptedChallengeRequestMessageTypeWithSubplebbitAuthor) => request is import("../../../../../pubsub-messages/types.js").DecryptedChallengeRequestMessageWithReplySubplebbitAuthor;
declare const isPost: (request: DecryptedChallengeRequestMessageTypeWithSubplebbitAuthor) => request is import("../../../../../pubsub-messages/types.js").DecryptedChallengeRequestMessageWithPostSubplebbitAuthor;
declare const testVote: (excludeVote: boolean | undefined, request: DecryptedChallengeRequestMessageTypeWithSubplebbitAuthor) => boolean;
declare const testReply: (excludeReply: boolean | undefined, request: DecryptedChallengeRequestMessageTypeWithSubplebbitAuthor) => boolean;
declare const testPost: (excludePost: boolean | undefined, request: DecryptedChallengeRequestMessageTypeWithSubplebbitAuthor) => boolean;
declare const testRole: (excludeRole: SubplebbitRole["role"][], authorAddress: string, subplebbitRoles: SubplebbitIpfsType["roles"]) => boolean;
export { isVote, isReply, isPost, testVote, testReply, testPost, testScore, testFirstCommentTimestamp, testRole };
