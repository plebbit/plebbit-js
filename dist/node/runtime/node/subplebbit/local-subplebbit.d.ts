import Logger from "@plebbit/plebbit-logger";
import { Plebbit } from "../../../plebbit.js";
import { CreateSubplebbitOptions, InternalSubplebbitType, SubplebbitEditOptions } from "../../../subplebbit/types.js";
import { DbHandler } from "./db-handler.js";
import { CommentEditPubsubMessage } from "../../../types.js";
import { ChallengeAnswerMessage } from "../../../challenge.js";
import { Signer } from "../../../signer/index.js";
import { RpcLocalSubplebbit } from "../../../subplebbit/rpc-local-subplebbit.js";
export declare class LocalSubplebbit extends RpcLocalSubplebbit {
    signer: Signer;
    private _postUpdatesBuckets;
    private _defaultSubplebbitChallenges;
    private _challengeAnswerPromises;
    private _challengeAnswerResolveReject;
    private _ongoingChallengeExchanges;
    private _cidsToUnPin;
    private _subplebbitUpdateTrigger;
    private _sortHandler;
    dbHandler: DbHandler;
    protected _usingDefaultChallenge: boolean;
    private _isSubRunningLocally;
    private _publishLoopPromise;
    private _publishInterval?;
    constructor(plebbit: Plebbit);
    toJSONInternal(): InternalSubplebbitType;
    initInternalSubplebbit(newProps: Partial<InternalSubplebbitType | CreateSubplebbitOptions>): Promise<void>;
    private initDbHandlerIfNeeded;
    _loadLocalSubDb(): Promise<void>;
    private _importSubplebbitSignerIntoIpfsIfNeeded;
    private _updateDbInternalState;
    private _getDbInternalState;
    private _mergeInstanceStateWithDbState;
    _setChallengesToDefaultIfNotDefined(log: Logger): Promise<void>;
    _createNewLocalSubDb(): Promise<void>;
    private _calculateNewPostUpdates;
    private updateSubplebbitIpnsIfNeeded;
    private storeCommentEdit;
    private storeVote;
    private isPublicationVote;
    private isPublicationComment;
    private isPublicationReply;
    private isPublicationPost;
    private isPublicationCommentEdit;
    private storePublication;
    private _decryptOrRespondWithFailure;
    private _respondWithErrorIfSignatureOfPublicationIsInvalid;
    private _publishChallenges;
    private _publishFailedChallengeVerification;
    private _publishChallengeVerification;
    private _commentEditIncludesUniqueModFields;
    private _commentEditIncludesUniqueAuthorFields;
    _isAuthorEdit(request: CommentEditPubsubMessage, editHasBeenSignedByOriginalAuthor: boolean): boolean;
    private _checkPublicationValidity;
    private handleChallengeRequest;
    private _cleanUpChallengeAnswerPromise;
    handleChallengeAnswer(challengeAnswer: ChallengeAnswerMessage): Promise<void>;
    private handleChallengeExchange;
    private _calculatePostUpdatePathForExistingCommentUpdate;
    private _calculateIpfsPathForCommentUpdate;
    private _writeCommentUpdateToIpfsFilePath;
    private _updateComment;
    private _validateCommentUpdateSignature;
    private _listenToIncomingRequests;
    private _movePostUpdatesFolderToNewAddress;
    private _isCurrentSubplebbitEqualToLatestPublishedRecord;
    private _switchDbWhileRunningIfNeeded;
    private _updateCommentsThatNeedToBeUpdated;
    private _repinCommentsIPFSIfNeeded;
    private _unpinStaleCids;
    private pubsubTopicWithfallback;
    private _repinCommentUpdateIfNeeded;
    private _adjustPostUpdatesBucketsIfNeeded;
    private syncIpnsWithDb;
    private _assertDomainResolvesCorrectly;
    private _initSignerProps;
    private _publishLoop;
    private _initBeforeStarting;
    edit(newSubplebbitOptions: SubplebbitEditOptions): Promise<this>;
    start(): Promise<void>;
    private _updateOnce;
    update(): Promise<void>;
    stop(): Promise<void>;
    delete(): Promise<void>;
}
