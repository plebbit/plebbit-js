import Logger from "@plebbit/plebbit-logger";
import { Plebbit } from "../../../plebbit/plebbit.js";
import type { CreateNewLocalSubplebbitParsedOptions, InternalSubplebbitRecordBeforeFirstUpdateType, InternalSubplebbitRecordAfterFirstUpdateType, SubplebbitEditOptions, RpcInternalSubplebbitRecordBeforeFirstUpdateType, RpcInternalSubplebbitRecordAfterFirstUpdateType } from "../../../subplebbit/types.js";
import { DbHandler } from "./db-handler.js";
import type { ChallengeAnswerMessageType } from "../../../pubsub-messages/types.js";
import { SignerWithPublicKeyAddress } from "../../../signer/index.js";
import { RpcLocalSubplebbit } from "../../../subplebbit/rpc-local-subplebbit.js";
export declare class LocalSubplebbit extends RpcLocalSubplebbit implements CreateNewLocalSubplebbitParsedOptions {
    signer: SignerWithPublicKeyAddress;
    private _postUpdatesBuckets;
    private _defaultSubplebbitChallenges;
    private _challengeAnswerPromises;
    private _challengeAnswerResolveReject;
    private _ongoingChallengeExchanges;
    private _cidsToUnPin;
    private _subplebbitUpdateTrigger;
    private _sortHandler;
    _dbHandler: DbHandler;
    private _stopHasBeenCalled;
    private _publishLoopPromise?;
    private _publishInterval?;
    private _internalStateUpdateId;
    constructor(plebbit: Plebbit);
    toJSONInternalAfterFirstUpdate(): InternalSubplebbitRecordAfterFirstUpdateType;
    toJSONInternalBeforeFirstUpdate(): InternalSubplebbitRecordBeforeFirstUpdateType;
    toJSONInternalRpcAfterFirstUpdate(): RpcInternalSubplebbitRecordAfterFirstUpdateType;
    toJSONInternalRpcBeforeFirstUpdate(): RpcInternalSubplebbitRecordBeforeFirstUpdateType;
    private _updateStartedValue;
    initNewLocalSubPropsNoMerge(newProps: CreateNewLocalSubplebbitParsedOptions): Promise<void>;
    initInternalSubplebbitAfterFirstUpdateNoMerge(newProps: InternalSubplebbitRecordAfterFirstUpdateType): Promise<void>;
    initInternalSubplebbitBeforeFirstUpdateNoMerge(newProps: InternalSubplebbitRecordBeforeFirstUpdateType): Promise<void>;
    private initDbHandlerIfNeeded;
    _loadLocalSubDb(): Promise<void>;
    private _importSubplebbitSignerIntoIpfsIfNeeded;
    private _updateDbInternalState;
    private _getDbInternalState;
    private _updateInstanceStateWithDbState;
    _setChallengesToDefaultIfNotDefined(log: Logger): Promise<void>;
    _createNewLocalSubDb(): Promise<void>;
    private _calculateNewPostUpdates;
    private _calculateLatestUpdateTrigger;
    private updateSubplebbitIpnsIfNeeded;
    private shouldResolveDomainForVerification;
    private _validateSubSchemaAndSignatureBeforePublishing;
    private storeCommentEdit;
    private storeCommentModeration;
    private storeVote;
    private isPublicationReply;
    private isPublicationPost;
    private _calculateLinkProps;
    private _calculatePostProps;
    private _calculateReplyProps;
    private storeComment;
    private storePublication;
    private _decryptOrRespondWithFailure;
    private _respondWithErrorIfSignatureOfPublicationIsInvalid;
    private _publishChallenges;
    private _publishFailedChallengeVerification;
    private _storePublicationAndEncryptForChallengeVerification;
    private _publishChallengeVerification;
    private _isModerator;
    private _checkPublicationValidity;
    private _parseChallengeRequestPublicationOrRespondWithFailure;
    private handleChallengeRequest;
    private _cleanUpChallengeAnswerPromise;
    private _parseChallengeAnswerOrRespondWithFailure;
    handleChallengeAnswer(challengeAnswer: ChallengeAnswerMessageType): Promise<void>;
    private handleChallengeExchange;
    private _calculatePostUpdatePathForExistingCommentUpdate;
    private _calculateIpfsPathForCommentUpdate;
    private _writeCommentUpdateToIpfsFilePath;
    private _updateComment;
    private _validateCommentUpdateSignature;
    private _listenToIncomingRequests;
    private _movePostUpdatesFolderToNewAddress;
    private _switchDbWhileRunningIfNeeded;
    private _updateCommentsThatNeedToBeUpdated;
    private _repinCommentsIPFSIfNeeded;
    private _unpinStaleCids;
    private pubsubTopicWithfallback;
    private _repinCommentUpdateIfNeeded;
    private _adjustPostUpdatesBucketsIfNeeded;
    private syncIpnsWithDb;
    private _assertDomainResolvesCorrectly;
    private _initSignerProps;
    private _publishLoop;
    private _initBeforeStarting;
    private _parseRolesToEdit;
    private _parseChallengesToEdit;
    edit(newSubplebbitOptions: SubplebbitEditOptions): Promise<this>;
    private _setSubplebbitIpfsIfNeeded;
    start(): Promise<void>;
    private _updateOnce;
    update(): Promise<void>;
    stop(): Promise<void>;
    delete(): Promise<void>;
}
