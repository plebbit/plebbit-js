import { Plebbit } from "../plebbit/plebbit.js";
import { TypedEmitter } from "tiny-typed-emitter";
import { PlebbitError } from "../plebbit-error.js";
import type { CreateRemoteSubplebbitOptions, SubplebbitIpfsType, RpcRemoteSubplebbitType, SubplebbitJson, SubplebbitUpdatingState, SubplebbitState, SubplebbitStartedState, SubplebbitSettings, RpcInternalSubplebbitRecordAfterFirstUpdateType, SubplebbitEditOptions, SubplebbitEventArgs, SubplebbitEvents } from "./types.js";
import { PostsPages } from "../pages/pages.js";
import { SignerWithPublicKeyAddress } from "../signer/index.js";
import { SubplebbitClientsManager } from "./subplebbit-client-manager.js";
export declare class RemoteSubplebbit extends TypedEmitter<SubplebbitEvents> implements Omit<Partial<SubplebbitIpfsType>, "posts"> {
    title?: SubplebbitIpfsType["title"];
    description?: SubplebbitIpfsType["description"];
    roles?: SubplebbitIpfsType["roles"];
    lastPostCid?: SubplebbitIpfsType["lastPostCid"];
    lastCommentCid?: SubplebbitIpfsType["lastCommentCid"];
    posts: PostsPages;
    pubsubTopic?: SubplebbitIpfsType["pubsubTopic"];
    features?: SubplebbitIpfsType["features"];
    suggested?: SubplebbitIpfsType["suggested"];
    flairs?: SubplebbitIpfsType["flairs"];
    address: SubplebbitIpfsType["address"];
    shortAddress: string;
    statsCid?: SubplebbitIpfsType["statsCid"];
    createdAt?: SubplebbitIpfsType["createdAt"];
    updatedAt?: SubplebbitIpfsType["updatedAt"];
    encryption?: SubplebbitIpfsType["encryption"];
    protocolVersion?: SubplebbitIpfsType["protocolVersion"];
    signature?: SubplebbitIpfsType["signature"];
    rules?: SubplebbitIpfsType["rules"];
    challenges?: SubplebbitIpfsType["challenges"];
    postUpdates?: SubplebbitIpfsType["postUpdates"];
    startedState?: "stopped" | SubplebbitStartedState;
    started?: boolean;
    signer?: SignerWithPublicKeyAddress | RpcInternalSubplebbitRecordAfterFirstUpdateType["signer"];
    settings?: SubplebbitSettings;
    editable?: Pick<RemoteSubplebbit, keyof SubplebbitEditOptions>;
    state: SubplebbitState;
    clients: SubplebbitClientsManager["clients"];
    updateCid?: string;
    ipnsName?: string;
    ipnsPubsubTopic?: string;
    ipnsPubsubTopicDhtKey?: string;
    pubsubTopicPeersCid?: string;
    _plebbit: Plebbit;
    _clientsManager: SubplebbitClientsManager;
    raw: {
        subplebbitIpfs?: SubplebbitIpfsType;
    };
    _updatingSubInstanceWithListeners?: {
        subplebbit: RemoteSubplebbit;
    } & Pick<SubplebbitEvents, "error" | "updatingstatechange" | "update" | "statechange">;
    _numOfListenersForUpdatingInstance: number;
    protected _updatingState: SubplebbitUpdatingState;
    constructor(plebbit: Plebbit);
    _updateLocalPostsInstance(newPosts: SubplebbitIpfsType["posts"] | SubplebbitJson["posts"] | Pick<NonNullable<SubplebbitIpfsType["posts"]>, "pageCids">): void;
    initSubplebbitIpfsPropsNoMerge(newProps: SubplebbitIpfsType): void;
    protected _updateIpnsPubsubPropsIfNeeded(newProps: SubplebbitJson | CreateRemoteSubplebbitOptions): void;
    initRemoteSubplebbitPropsNoMerge(newProps: SubplebbitJson | CreateRemoteSubplebbitOptions): void;
    setAddress(newAddress: string): void;
    protected _toJSONIpfsBaseNoPosts(): Pick<this, "address" | "signature" | "protocolVersion" | "title" | "updatedAt" | "lastCommentCid" | "challenges" | "description" | "encryption" | "createdAt" | "pubsubTopic" | "statsCid" | "postUpdates" | "roles" | "rules" | "lastPostCid" | "features" | "suggested" | "flairs">;
    toJSONIpfs(): SubplebbitIpfsType;
    toJSONRpcRemote(): RpcRemoteSubplebbitType;
    get updatingState(): SubplebbitUpdatingState;
    _setState(newState: RemoteSubplebbit["state"]): void;
    _setStateNoEmission(newState: RemoteSubplebbit["state"]): void;
    _changeStateEmitEventEmitStateChangeEvent<T extends keyof Omit<SubplebbitEvents, "statechange" | "updatingstatechange">>(opts: {
        event: {
            name: T;
            args: SubplebbitEventArgs<T>;
        };
        newUpdatingState?: RemoteSubplebbit["updatingState"];
        newState?: RemoteSubplebbit["state"];
        newStartedState?: RemoteSubplebbit["startedState"];
    }): void;
    _setUpdatingStateNoEmission(newState: RemoteSubplebbit["updatingState"]): void;
    _setUpdatingStateWithEventEmissionIfNewState(newState: RemoteSubplebbit["updatingState"]): void;
    protected _setStartedStateNoEmission(newState: SubplebbitStartedState): void;
    protected _setStartedStateWithEmission(newState: SubplebbitStartedState): void;
    _isRetriableErrorWhenLoading(err: PlebbitError | Error): boolean;
    _setSubplebbitIpfsPropsFromUpdatingSubplebbitsIfPossible(): void;
    private _initSubInstanceWithListeners;
    private fetchLatestSubOrSubscribeToEvent;
    update(): Promise<void>;
    private _cleanUpUpdatingSubInstanceWithListeners;
    stop(): Promise<void>;
    edit(options: any): Promise<any>;
    delete(): Promise<void>;
    start(): Promise<void>;
}
