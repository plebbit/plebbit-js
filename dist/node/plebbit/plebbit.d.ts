import type { StorageInterface, ChainProvider, GatewayClient, KuboRpcClient, PlebbitEvents, PubsubClient, ParsedPlebbitOptions, LRUStorageInterface, LRUStorageConstructor, InputPlebbitOptions, PlebbitMemCaches } from "../types.js";
import { Comment } from "../publications/comment/comment.js";
import Vote from "../publications/vote/vote.js";
import { CommentEdit } from "../publications/comment-edit/comment-edit.js";
import Stats from "../stats.js";
import { PlebbitClientsManager } from "./plebbit-client-manager.js";
import PlebbitRpcClient from "../clients/rpc-client/plebbit-rpc-client.js";
import type { CreateRemoteSubplebbitOptions, SubplebbitJson, SubplebbitIpfsType, RemoteSubplebbitJson, RpcRemoteSubplebbitJson } from "../subplebbit/types.js";
import { RemoteSubplebbit } from "../subplebbit/remote-subplebbit.js";
import { RpcRemoteSubplebbit } from "../subplebbit/rpc-remote-subplebbit.js";
import { RpcLocalSubplebbit } from "../subplebbit/rpc-local-subplebbit.js";
import { LocalSubplebbit } from "../runtime/node/subplebbit/local-subplebbit.js";
import { z } from "zod";
import type { CreateSignerOptions } from "../signer/types.js";
import type { CommentEditPubsubMessagePublication, CommentEditTypeJson, CreateCommentEditOptions } from "../publications/comment-edit/types.js";
import type { CreateVoteOptions, VoteJson, VotePubsubMessagePublication } from "../publications/vote/types.js";
import type { CommentIpfsType, CommentIpfsWithCidDefined, CommentJson, CommentPubsubMessagePublication, CommentUpdateType, CommentWithinPageJson, CreateCommentOptions, MinimumCommentFieldsToFetchPages } from "../publications/comment/types.js";
import { CidStringSchema, SubplebbitAddressSchema } from "../schema/schema.js";
import { CreateSubplebbitFunctionArgumentsSchema } from "../subplebbit/schema.js";
import { CommentModeration } from "../publications/comment-moderation/comment-moderation.js";
import type { CommentModerationPubsubMessagePublication, CommentModerationTypeJson, CreateCommentModerationOptions } from "../publications/comment-moderation/types.js";
import SubplebbitEdit from "../publications/subplebbit-edit/subplebbit-edit.js";
import type { CreateSubplebbitEditPublicationOptions, SubplebbitEditJson, SubplebbitEditPubsubMessagePublication } from "../publications/subplebbit-edit/types.js";
import { DomainResolver } from "../domain-resolver.js";
import { PlebbitTypedEmitter } from "../clients/plebbit-typed-emitter.js";
import type { PageTypeJson } from "../pages/types.js";
import { Libp2pJsClient } from "../helia/libp2pjsClient.js";
export declare class Plebbit extends PlebbitTypedEmitter<PlebbitEvents> implements ParsedPlebbitOptions {
    ipfsGatewayUrls: ParsedPlebbitOptions["ipfsGatewayUrls"];
    kuboRpcClientsOptions?: ParsedPlebbitOptions["kuboRpcClientsOptions"];
    pubsubKuboRpcClientsOptions: ParsedPlebbitOptions["pubsubKuboRpcClientsOptions"];
    plebbitRpcClientsOptions?: ParsedPlebbitOptions["plebbitRpcClientsOptions"];
    libp2pJsClientOptions?: ParsedPlebbitOptions["libp2pJsClientOptions"];
    dataPath?: ParsedPlebbitOptions["dataPath"];
    resolveAuthorAddresses: ParsedPlebbitOptions["resolveAuthorAddresses"];
    chainProviders: ParsedPlebbitOptions["chainProviders"];
    parsedPlebbitOptions: ParsedPlebbitOptions;
    publishInterval: ParsedPlebbitOptions["publishInterval"];
    updateInterval: ParsedPlebbitOptions["updateInterval"];
    noData: ParsedPlebbitOptions["noData"];
    validatePages: ParsedPlebbitOptions["validatePages"];
    userAgent: ParsedPlebbitOptions["userAgent"];
    httpRoutersOptions: ParsedPlebbitOptions["httpRoutersOptions"];
    clients: {
        ipfsGateways: {
            [ipfsGatewayUrl: NonNullable<ParsedPlebbitOptions["ipfsGatewayUrls"]>[number]]: GatewayClient;
        };
        kuboRpcClients: {
            [kuboRpcClientUrl: string]: KuboRpcClient;
        };
        pubsubKuboRpcClients: {
            [pubsubKuboClientUrl: string]: PubsubClient;
        };
        chainProviders: {
            [chainProviderUrl: string]: ChainProvider;
        };
        plebbitRpcClients: {
            [plebbitRpcUrl: NonNullable<ParsedPlebbitOptions["plebbitRpcClientsOptions"]>[number]]: PlebbitRpcClient;
        };
        libp2pJsClients: {
            [libp2pJsClientKey: NonNullable<ParsedPlebbitOptions["libp2pJsClientOptions"]>[number]["key"]]: Libp2pJsClient;
        };
    };
    subplebbits: string[];
    _plebbitRpcClient?: PlebbitRpcClient;
    private _pubsubSubscriptions;
    _clientsManager: PlebbitClientsManager;
    _userPlebbitOptions: InputPlebbitOptions;
    _stats: Stats;
    _storage: StorageInterface;
    _updatingSubplebbits: Record<SubplebbitIpfsType["address"], Awaited<ReturnType<Plebbit["createSubplebbit"]>>>;
    _updatingComments: Record<string, Awaited<ReturnType<Plebbit["createComment"]>>>;
    _startedSubplebbits: Record<SubplebbitIpfsType["address"], LocalSubplebbit | RpcLocalSubplebbit>;
    private _subplebbitFsWatchAbort?;
    private _addressRewriterDestroy?;
    private _promiseToWaitForFirstSubplebbitschangeEvent;
    private _storageLRUs;
    _memCaches: PlebbitMemCaches;
    _domainResolver: DomainResolver;
    _timeouts: {
        "subplebbit-ipns": number;
        "subplebbit-ipfs": number;
        "comment-ipfs": number;
        "comment-update-ipfs": number;
        "page-ipfs": number;
        "generic-ipfs": number;
    };
    constructor(options: InputPlebbitOptions);
    _initMemCaches(): void;
    private _initKuboRpcClientsIfNeeded;
    private _initKuboPubsubClientsIfNeeded;
    private _initLibp2pJsClientsIfNeeded;
    private _initRpcClientsIfNeeded;
    private _initChainProviders;
    private _initIpfsGatewaysIfNeeded;
    private _setupHttpRoutersWithKuboNodeInBackground;
    _init(): Promise<void>;
    getSubplebbit(subplebbitAddress: z.infer<typeof SubplebbitAddressSchema>): Promise<RemoteSubplebbit>;
    getComment(cid: z.infer<typeof CidStringSchema>): Promise<Comment>;
    private _initMissingFieldsOfPublicationBeforeSigning;
    private _createCommentInstanceFromAnotherCommentInstance;
    createComment(options: CommentIpfsType | CommentPubsubMessagePublication | {
        cid: CommentUpdateType["cid"];
        subplebbitAddress?: CommentPubsubMessagePublication["subplebbitAddress"];
    } | MinimumCommentFieldsToFetchPages | CreateCommentOptions | CommentJson | Comment | CommentWithinPageJson | CommentIpfsWithCidDefined): Promise<Comment>;
    _canCreateNewLocalSub(): boolean;
    protected _setSubplebbitIpfsOnInstanceIfPossible(subplebbit: RpcRemoteSubplebbit | RemoteSubplebbit, options: CreateRemoteSubplebbitOptions | SubplebbitIpfsType | RemoteSubplebbitJson | RpcRemoteSubplebbitJson): Promise<void>;
    protected _waitForSubplebbitsToBeDefined(): Promise<void>;
    _awaitSubplebbitsToIncludeSub(subAddress: string): Promise<void>;
    private _createRemoteSubplebbitInstance;
    private _createLocalSub;
    private _createSubInstanceFromJsonifiedSub;
    createSubplebbit(options?: z.infer<typeof CreateSubplebbitFunctionArgumentsSchema> | SubplebbitJson): Promise<RemoteSubplebbit | RpcRemoteSubplebbit | RpcLocalSubplebbit | LocalSubplebbit>;
    _createVoteInstanceFromJsonfiedVote(jsonfied: VoteJson): Promise<Vote>;
    createVote(options: CreateVoteOptions | VotePubsubMessagePublication | VoteJson): Promise<Vote>;
    _createCommentEditInstanceFromJsonfiedCommentEdit(jsonfied: CommentEditTypeJson): Promise<CommentEdit>;
    createCommentEdit(options: CreateCommentEditOptions | CommentEditPubsubMessagePublication | CommentEditTypeJson): Promise<CommentEdit>;
    _createCommentModerationInstanceFromJsonfiedCommentModeration(jsonfied: CommentModerationTypeJson): Promise<CommentModeration>;
    createCommentModeration(options: CreateCommentModerationOptions | CommentModerationPubsubMessagePublication | CommentModerationTypeJson): Promise<CommentModeration>;
    _createSubplebbitEditInstanceFromJsonfiedSubplebbitEdit(jsonfied: SubplebbitEditJson): Promise<SubplebbitEdit>;
    createSubplebbitEdit(options: CreateSubplebbitEditPublicationOptions | SubplebbitEditPubsubMessagePublication | SubplebbitEditJson): Promise<SubplebbitEdit>;
    createSigner(createSignerOptions?: CreateSignerOptions): Promise<import("../signer/index.js").SignerWithPublicKeyAddress>;
    fetchCid(cid: string): Promise<string>;
    pubsubSubscribe(pubsubTopic: string): Promise<void>;
    pubsubUnsubscribe(pubsubTopic: string): Promise<void>;
    resolveAuthorAddress(authorAddress: string): Promise<string | null>;
    validateComment(comment: Comment | PageTypeJson["comments"][number], opts?: {
        validateReplies?: boolean;
    }): Promise<void>;
    _createStorageLRU(opts: Omit<LRUStorageConstructor, "plebbit">): Promise<LRUStorageInterface>;
    destroy(): Promise<void>;
}
