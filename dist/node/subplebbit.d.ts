/// <reference types="node" />
import EventEmitter from "events";
import { ChallengeAnswerMessage } from "./challenge";
import { Signer } from "./signer";
import { Pages } from "./pages";
import { Plebbit } from "./plebbit";
import { ChallengeType, CreateSubplebbitOptions, DbHandlerPublicAPI, DecryptedChallengeAnswerMessageType, DecryptedChallengeRequestMessageType, Flair, FlairOwner, ProtocolVersion, SignatureType, SubplebbitEditOptions, SubplebbitEncryption, SubplebbitFeatures, SubplebbitMetrics, SubplebbitRole, SubplebbitSuggested, SubplebbitType } from "./types";
import { Comment } from "./comment";
import Vote from "./vote";
import Post from "./post";
import { CommentEdit } from "./comment-edit";
export declare class Subplebbit extends EventEmitter implements SubplebbitType {
    title?: string;
    description?: string;
    roles?: {
        [authorAddress: string]: SubplebbitRole;
    };
    lastPostCid?: string;
    posts: Pages;
    pubsubTopic: string;
    challengeTypes?: ChallengeType[];
    metrics?: SubplebbitMetrics;
    features?: SubplebbitFeatures;
    suggested?: SubplebbitSuggested;
    flairs?: Record<FlairOwner, Flair[]>;
    address: string;
    metricsCid?: string;
    createdAt: number;
    updatedAt: number;
    signer?: Signer;
    encryption: SubplebbitEncryption;
    protocolVersion: ProtocolVersion;
    signature: SignatureType;
    rules?: string[];
    plebbit: Plebbit;
    dbHandler?: DbHandlerPublicAPI;
    private _challengeToSolution;
    private _challengeToPublicKey;
    private _challengeToPublication;
    private provideCaptchaCallback;
    private validateCaptchaAnswerCallback;
    private sortHandler;
    private _updateInterval?;
    private _updateIntervalMs;
    private _syncInterval?;
    private _syncIntervalMs;
    private _sync;
    constructor(props: CreateSubplebbitOptions, plebbit: Plebbit);
    initSubplebbit(newProps: SubplebbitType | SubplebbitEditOptions): void;
    private _initSignerProps;
    private initDbHandlerIfNeeded;
    setProvideCaptchaCallback(newCallback: (request: DecryptedChallengeRequestMessageType) => Promise<[ChallengeType[], string | undefined]>): void;
    setValidateCaptchaAnswerCallback(newCallback: (answerMessage: DecryptedChallengeAnswerMessageType) => Promise<[boolean, string[] | undefined]>): void;
    toJSONInternal(): {
        signer: Pick<Signer, "type" | "address" | "privateKey">;
        signature: SignatureType;
        encryption: SubplebbitEncryption;
        address: string;
        createdAt: number;
        updatedAt: number;
        pubsubTopic: string;
        metricsCid?: string;
        protocolVersion: "1.0.0";
        posts: Pages | Pick<Pages, "pages" | "pageCids">;
        title?: string;
        description?: string;
        roles?: {
            [authorAddress: string]: SubplebbitRole;
        };
        rules?: string[];
        lastPostCid?: string;
        challengeTypes?: ChallengeType[];
        metrics?: SubplebbitMetrics;
        features?: SubplebbitFeatures;
        suggested?: SubplebbitSuggested;
        flairs?: Record<FlairOwner, Flair[]>;
    };
    toJSON(): SubplebbitType;
    private _importSignerIntoIpfsIfNeeded;
    prePublish(): Promise<void>;
    private assertDomainResolvesCorrectly;
    edit(newSubplebbitOptions: SubplebbitEditOptions): Promise<Subplebbit>;
    private updateOnce;
    update(): Promise<void>;
    stop(): Promise<void>;
    private updateSubplebbitIpns;
    private _insertAuthorIfNotInDb;
    private handleCommentEdit;
    private handleVote;
    private storePublicationIfValid;
    private handleChallengeRequest;
    handleChallengeAnswer(challengeAnswer: ChallengeAnswerMessage): Promise<void>;
    private _verifyPubsubMsgSignature;
    private handleChallengeExchange;
    private defaultProvideCaptcha;
    private defaultValidateCaptcha;
    private _publishCommentIpns;
    private syncComment;
    private _listenToIncomingRequests;
    private _getDbInternalState;
    private _mergeInstanceStateWithDbState;
    private _switchDbIfNeeded;
    private syncIpnsWithDb;
    private _updateDbInternalState;
    private _syncLoop;
    start(): Promise<void>;
    delete(): Promise<void>;
    _addPublicationToDb(publication: CommentEdit | Vote | Comment | Post): Promise<string | Comment | Post | Vote | CommentEdit>;
}
