import Author from "./author.js";
import { Signer } from "../signer/index.js";
import { CommentEditPubsubMessage, CommentIpfsType, CommentPubsubMessage, DecryptedChallengeRequest, DecryptedChallengeVerificationMessageTypeWithSubplebbitAuthor, LocalPublicationProps, ProtocolVersion, PublicationEvents, PublicationPubsubMessage, PublicationTypeName, VotePubsubMessage } from "../types.js";
import { Plebbit } from "../plebbit.js";
import { TypedEmitter } from "tiny-typed-emitter";
import { PublicationClientsManager } from "../clients/client-manager.js";
import { JsonSignature } from "../signer/constants.js";
import { SubplebbitIpfsType } from "../subplebbit/types.js";
declare class Publication extends TypedEmitter<PublicationEvents> {
    clients: PublicationClientsManager["clients"];
    subplebbitAddress: string;
    shortSubplebbitAddress: string;
    timestamp: number;
    signature: JsonSignature;
    signer?: Signer;
    author: Author;
    protocolVersion: ProtocolVersion;
    state: "stopped" | "updating" | "publishing";
    publishingState: "stopped" | "resolving-subplebbit-address" | "fetching-subplebbit-ipns" | "fetching-subplebbit-ipfs" | "publishing-challenge-request" | "waiting-challenge" | "waiting-challenge-answers" | "publishing-challenge-answer" | "waiting-challenge-verification" | "failed" | "succeeded";
    challengeAnswers?: string[];
    challengeCommentCids?: string[];
    private subplebbit?;
    private _challengeAnswer?;
    private _publishedChallengeRequests?;
    private _challengeIdToPubsubSigner;
    private _pubsubProviders;
    private _pubsubProvidersDoneWaiting?;
    private _currentPubsubProviderIndex?;
    private _receivedChallengeFromSub;
    private _receivedChallengeVerification;
    private _challenge?;
    private _publishToDifferentProviderThresholdSeconds;
    private _setProviderFailureThresholdSeconds;
    private _rpcPublishSubscriptionId?;
    _clientsManager: PublicationClientsManager;
    _plebbit: Plebbit;
    constructor(plebbit: Plebbit);
    protected _initClients(): void;
    setSubplebbitAddress(subplebbitAddress: string): void;
    _initChallengeRequestChallengeProps(props: Pick<LocalPublicationProps, "challengeAnswers" | "challengeCommentCids">): void;
    _initBaseLocalProps(props: LocalPublicationProps): void;
    _initBaseRemoteProps(props: CommentIpfsType | CommentPubsubMessage | VotePubsubMessage | CommentEditPubsubMessage): void;
    protected _updateLocalCommentPropsWithVerification(publication: DecryptedChallengeVerificationMessageTypeWithSubplebbitAuthor["publication"]): void;
    protected getType(): PublicationTypeName;
    toJSONPubsubMessagePublication(): PublicationPubsubMessage;
    toJSON(): void;
    toJSONPubsubMessage(): DecryptedChallengeRequest;
    private _handleRpcChallenge;
    private _handleRpcChallengeVerification;
    private _handleRpcChallengeAnswer;
    private handleChallengeExchange;
    publishChallengeAnswers(challengeAnswers: string[]): Promise<void>;
    private _validatePublicationFields;
    private _validateSubFields;
    _updatePublishingState(newState: Publication["publishingState"]): void;
    private _updateRpcClientStateFromPublishingState;
    protected _updateState(newState: Publication["state"]): void;
    protected _setRpcClientState(newState: Publication["clients"]["plebbitRpcClients"][""]["state"]): void;
    private _pubsubTopicWithfallback;
    _getSubplebbitCache(): Pick<SubplebbitIpfsType, "encryption" | "address" | "pubsubTopic"> | undefined;
    _fetchSubplebbitForPublishing(): Promise<Pick<SubplebbitIpfsType, "encryption" | "address" | "pubsubTopic">>;
    stop(): Promise<void>;
    _isAllAttemptsExhausted(): boolean;
    _setProviderToFailIfNoResponse(providerIndex: number): void;
    private _postSucessOrFailurePublishing;
    _publishWithRpc(): Promise<void>;
    publish(): Promise<void>;
}
export default Publication;
