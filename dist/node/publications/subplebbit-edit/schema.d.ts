export declare const CreateSubplebbitEditPublicationOptionsSchema: import("zod").ZodObject<{
    signer: import("zod").ZodObject<{
        type: import("zod").ZodEnum<{
            ed25519: "ed25519";
        }>;
        privateKey: import("zod").ZodString;
    }, import("zod/v4/core").$strip>;
    author: import("zod").ZodOptional<import("zod").ZodObject<{
        address: import("zod").ZodOptional<import("zod").ZodString>;
        previousCommentCid: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
        displayName: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
        wallets: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
            address: import("zod").ZodString;
            timestamp: import("zod").ZodNumber;
            signature: import("zod").ZodObject<{
                signature: import("zod").ZodString;
                type: import("zod").ZodString;
            }, import("zod/v4/core").$strip>;
        }, import("zod/v4/core").$strip>>>>;
        avatar: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
            chainTicker: import("zod").ZodString;
            address: import("zod").ZodString;
            id: import("zod").ZodString;
            timestamp: import("zod").ZodNumber;
            signature: import("zod").ZodObject<{
                signature: import("zod").ZodString;
                type: import("zod").ZodString;
            }, import("zod/v4/core").$strip>;
        }, import("zod/v4/core").$loose>>>;
        flair: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
            text: import("zod").ZodString;
            backgroundColor: import("zod").ZodOptional<import("zod").ZodString>;
            textColor: import("zod").ZodOptional<import("zod").ZodString>;
            expiresAt: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, import("zod/v4/core").$loose>>>;
    }, import("zod/v4/core").$loose>>;
    subplebbitAddress: import("zod").ZodString;
    protocolVersion: import("zod").ZodOptional<import("zod").ZodString>;
    timestamp: import("zod").ZodOptional<import("zod").ZodNumber>;
    challengeRequest: import("zod").ZodOptional<import("zod").ZodObject<{
        challengeAnswers: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>;
        challengeCommentCids: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>;
    }, import("zod/v4/core").$strip>>;
    subplebbitEdit: import("zod").ZodObject<{
        address: import("zod").ZodOptional<import("zod").ZodString>;
        title: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
        description: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
        pubsubTopic: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
        rules: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>>;
        features: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
            noVideos: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noSpoilers: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noImages: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noVideoReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noSpoilerReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noImageReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noPolls: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noCrossposts: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noAuthors: import("zod").ZodOptional<import("zod").ZodBoolean>;
            anonymousAuthors: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noNestedReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            safeForWork: import("zod").ZodOptional<import("zod").ZodBoolean>;
            authorFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
            requireAuthorFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
            postFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
            requirePostFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noMarkdownImages: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noMarkdownVideos: import("zod").ZodOptional<import("zod").ZodBoolean>;
            markdownImageReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            markdownVideoReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noPostUpvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noReplyUpvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noPostDownvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noReplyDownvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noUpvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noDownvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            requirePostLink: import("zod").ZodOptional<import("zod").ZodBoolean>;
            requirePostLinkIsMedia: import("zod").ZodOptional<import("zod").ZodBoolean>;
        }, import("zod/v4/core").$loose>>>;
        suggested: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
            primaryColor: import("zod").ZodOptional<import("zod").ZodString>;
            secondaryColor: import("zod").ZodOptional<import("zod").ZodString>;
            avatarUrl: import("zod").ZodOptional<import("zod").ZodString>;
            bannerUrl: import("zod").ZodOptional<import("zod").ZodString>;
            backgroundUrl: import("zod").ZodOptional<import("zod").ZodString>;
            language: import("zod").ZodOptional<import("zod").ZodString>;
        }, import("zod/v4/core").$loose>>>;
        flairs: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodArray<import("zod").ZodObject<{
            text: import("zod").ZodString;
            backgroundColor: import("zod").ZodOptional<import("zod").ZodString>;
            textColor: import("zod").ZodOptional<import("zod").ZodString>;
            expiresAt: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, import("zod/v4/core").$loose>>>>>;
        settings: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
            fetchThumbnailUrls: import("zod").ZodOptional<import("zod").ZodBoolean>;
            fetchThumbnailUrlsProxyUrl: import("zod").ZodOptional<import("zod").ZodString>;
            challenges: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                path: import("zod").ZodOptional<import("zod").ZodString>;
                name: import("zod").ZodOptional<import("zod").ZodString>;
                options: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                exclude: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    subplebbit: import("zod").ZodOptional<import("zod").ZodObject<{
                        addresses: import("zod").ZodArray<import("zod").ZodString>;
                        maxCommentCids: import("zod").ZodNumber;
                        postScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                        replyScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                        firstCommentTimestamp: import("zod").ZodOptional<import("zod").ZodNumber>;
                    }, import("zod/v4/core").$strict>>;
                    postScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                    replyScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                    firstCommentTimestamp: import("zod").ZodOptional<import("zod").ZodNumber>;
                    challenges: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodNumber>>;
                    role: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodEnum<{
                        owner: "owner";
                        admin: "admin";
                        moderator: "moderator";
                    }>, import("zod").ZodString]>>>;
                    address: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>;
                    rateLimit: import("zod").ZodOptional<import("zod").ZodNumber>;
                    rateLimitChallengeSuccess: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    publicationType: import("zod").ZodOptional<import("zod").ZodObject<{
                        post: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        reply: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        vote: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        commentEdit: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        commentModeration: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        subplebbitEdit: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    }, import("zod/v4/core").$loose>>;
                }, import("zod/v4/core").$loose>>>;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                pendingApproval: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, import("zod/v4/core").$strict>>>;
            maxPendingApprovalCount: import("zod").ZodOptional<import("zod").ZodNumber>;
            purgeDisapprovedCommentsOlderThan: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, import("zod/v4/core").$strict>>>;
        roles: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
            role: import("zod").ZodUnion<[import("zod").ZodEnum<{
                owner: "owner";
                admin: "admin";
                moderator: "moderator";
            }>, import("zod").ZodString]>;
        }, import("zod/v4/core").$loose>, import("zod").ZodUndefined]>>>>;
    }, import("zod/v4/core").$strict>;
}, import("zod/v4/core").$strict>;
export declare const SubplebbitEditPublicationSignedPropertyNames: ("timestamp" | "subplebbitAddress" | "author" | "protocolVersion" | "subplebbitEdit")[];
export declare const SubplebbitEditPubsubMessagePublicationSchema: import("zod").ZodObject<{
    timestamp: import("zod").ZodNumber;
    signature: import("zod").ZodObject<{
        type: import("zod").ZodString;
        signature: import("zod").ZodString;
        publicKey: import("zod").ZodString;
        signedPropertyNames: import("zod").ZodArray<import("zod").ZodString>;
    }, import("zod/v4/core").$strip>;
    subplebbitAddress: import("zod").ZodString;
    author: import("zod").ZodObject<{
        address: import("zod").ZodString;
        previousCommentCid: import("zod").ZodOptional<import("zod").ZodString>;
        displayName: import("zod").ZodOptional<import("zod").ZodString>;
        wallets: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
            address: import("zod").ZodString;
            timestamp: import("zod").ZodNumber;
            signature: import("zod").ZodObject<{
                signature: import("zod").ZodString;
                type: import("zod").ZodString;
            }, import("zod/v4/core").$strip>;
        }, import("zod/v4/core").$strip>>>;
        avatar: import("zod").ZodOptional<import("zod").ZodObject<{
            chainTicker: import("zod").ZodString;
            address: import("zod").ZodString;
            id: import("zod").ZodString;
            timestamp: import("zod").ZodNumber;
            signature: import("zod").ZodObject<{
                signature: import("zod").ZodString;
                type: import("zod").ZodString;
            }, import("zod/v4/core").$strip>;
        }, import("zod/v4/core").$loose>>;
        flair: import("zod").ZodOptional<import("zod").ZodObject<{
            text: import("zod").ZodString;
            backgroundColor: import("zod").ZodOptional<import("zod").ZodString>;
            textColor: import("zod").ZodOptional<import("zod").ZodString>;
            expiresAt: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, import("zod/v4/core").$loose>>;
    }, import("zod/v4/core").$loose>;
    protocolVersion: import("zod").ZodString;
    subplebbitEdit: import("zod").ZodObject<{
        address: import("zod").ZodOptional<import("zod").ZodString>;
        title: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
        description: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
        pubsubTopic: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
        rules: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>>;
        features: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
            noVideos: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noSpoilers: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noImages: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noVideoReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noSpoilerReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noImageReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noPolls: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noCrossposts: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noAuthors: import("zod").ZodOptional<import("zod").ZodBoolean>;
            anonymousAuthors: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noNestedReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            safeForWork: import("zod").ZodOptional<import("zod").ZodBoolean>;
            authorFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
            requireAuthorFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
            postFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
            requirePostFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noMarkdownImages: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noMarkdownVideos: import("zod").ZodOptional<import("zod").ZodBoolean>;
            markdownImageReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            markdownVideoReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noPostUpvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noReplyUpvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noPostDownvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noReplyDownvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noUpvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            noDownvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
            requirePostLink: import("zod").ZodOptional<import("zod").ZodBoolean>;
            requirePostLinkIsMedia: import("zod").ZodOptional<import("zod").ZodBoolean>;
        }, import("zod/v4/core").$loose>>>;
        suggested: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
            primaryColor: import("zod").ZodOptional<import("zod").ZodString>;
            secondaryColor: import("zod").ZodOptional<import("zod").ZodString>;
            avatarUrl: import("zod").ZodOptional<import("zod").ZodString>;
            bannerUrl: import("zod").ZodOptional<import("zod").ZodString>;
            backgroundUrl: import("zod").ZodOptional<import("zod").ZodString>;
            language: import("zod").ZodOptional<import("zod").ZodString>;
        }, import("zod/v4/core").$loose>>>;
        flairs: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodArray<import("zod").ZodObject<{
            text: import("zod").ZodString;
            backgroundColor: import("zod").ZodOptional<import("zod").ZodString>;
            textColor: import("zod").ZodOptional<import("zod").ZodString>;
            expiresAt: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, import("zod/v4/core").$loose>>>>>;
        settings: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
            fetchThumbnailUrls: import("zod").ZodOptional<import("zod").ZodBoolean>;
            fetchThumbnailUrlsProxyUrl: import("zod").ZodOptional<import("zod").ZodString>;
            challenges: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                path: import("zod").ZodOptional<import("zod").ZodString>;
                name: import("zod").ZodOptional<import("zod").ZodString>;
                options: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                exclude: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    subplebbit: import("zod").ZodOptional<import("zod").ZodObject<{
                        addresses: import("zod").ZodArray<import("zod").ZodString>;
                        maxCommentCids: import("zod").ZodNumber;
                        postScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                        replyScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                        firstCommentTimestamp: import("zod").ZodOptional<import("zod").ZodNumber>;
                    }, import("zod/v4/core").$strict>>;
                    postScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                    replyScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                    firstCommentTimestamp: import("zod").ZodOptional<import("zod").ZodNumber>;
                    challenges: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodNumber>>;
                    role: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodEnum<{
                        owner: "owner";
                        admin: "admin";
                        moderator: "moderator";
                    }>, import("zod").ZodString]>>>;
                    address: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>;
                    rateLimit: import("zod").ZodOptional<import("zod").ZodNumber>;
                    rateLimitChallengeSuccess: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    publicationType: import("zod").ZodOptional<import("zod").ZodObject<{
                        post: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        reply: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        vote: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        commentEdit: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        commentModeration: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        subplebbitEdit: import("zod").ZodOptional<import("zod").ZodBoolean>;
                    }, import("zod/v4/core").$loose>>;
                }, import("zod/v4/core").$loose>>>;
                description: import("zod").ZodOptional<import("zod").ZodString>;
                pendingApproval: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, import("zod/v4/core").$strict>>>;
            maxPendingApprovalCount: import("zod").ZodOptional<import("zod").ZodNumber>;
            purgeDisapprovedCommentsOlderThan: import("zod").ZodOptional<import("zod").ZodNumber>;
        }, import("zod/v4/core").$strict>>>;
        roles: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
            role: import("zod").ZodUnion<[import("zod").ZodEnum<{
                owner: "owner";
                admin: "admin";
                moderator: "moderator";
            }>, import("zod").ZodString]>;
        }, import("zod/v4/core").$loose>, import("zod").ZodUndefined]>>>>;
    }, import("zod/v4/core").$strict>;
}, import("zod/v4/core").$strict>;
export declare const SubplebbitEditPublicationChallengeRequestToEncryptSchema: import("zod").ZodObject<{
    challengeAnswers: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>;
    challengeCommentCids: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>;
    subplebbitEdit: import("zod").ZodObject<{
        timestamp: import("zod").ZodNumber;
        signature: import("zod").ZodObject<{
            type: import("zod").ZodString;
            signature: import("zod").ZodString;
            publicKey: import("zod").ZodString;
            signedPropertyNames: import("zod").ZodArray<import("zod").ZodString>;
        }, import("zod/v4/core").$strip>;
        subplebbitAddress: import("zod").ZodString;
        author: import("zod").ZodObject<{
            address: import("zod").ZodString;
            previousCommentCid: import("zod").ZodOptional<import("zod").ZodString>;
            displayName: import("zod").ZodOptional<import("zod").ZodString>;
            wallets: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodObject<{
                address: import("zod").ZodString;
                timestamp: import("zod").ZodNumber;
                signature: import("zod").ZodObject<{
                    signature: import("zod").ZodString;
                    type: import("zod").ZodString;
                }, import("zod/v4/core").$strip>;
            }, import("zod/v4/core").$strip>>>;
            avatar: import("zod").ZodOptional<import("zod").ZodObject<{
                chainTicker: import("zod").ZodString;
                address: import("zod").ZodString;
                id: import("zod").ZodString;
                timestamp: import("zod").ZodNumber;
                signature: import("zod").ZodObject<{
                    signature: import("zod").ZodString;
                    type: import("zod").ZodString;
                }, import("zod/v4/core").$strip>;
            }, import("zod/v4/core").$loose>>;
            flair: import("zod").ZodOptional<import("zod").ZodObject<{
                text: import("zod").ZodString;
                backgroundColor: import("zod").ZodOptional<import("zod").ZodString>;
                textColor: import("zod").ZodOptional<import("zod").ZodString>;
                expiresAt: import("zod").ZodOptional<import("zod").ZodNumber>;
            }, import("zod/v4/core").$loose>>;
        }, import("zod/v4/core").$loose>;
        protocolVersion: import("zod").ZodString;
        subplebbitEdit: import("zod").ZodObject<{
            address: import("zod").ZodOptional<import("zod").ZodString>;
            title: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
            description: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
            pubsubTopic: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodString>>;
            rules: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>>;
            features: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
                noVideos: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noSpoilers: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noImages: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noVideoReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noSpoilerReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noImageReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noPolls: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noCrossposts: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noAuthors: import("zod").ZodOptional<import("zod").ZodBoolean>;
                anonymousAuthors: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noNestedReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
                safeForWork: import("zod").ZodOptional<import("zod").ZodBoolean>;
                authorFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
                requireAuthorFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
                postFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
                requirePostFlairs: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noMarkdownImages: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noMarkdownVideos: import("zod").ZodOptional<import("zod").ZodBoolean>;
                markdownImageReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
                markdownVideoReplies: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noPostUpvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noReplyUpvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noPostDownvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noReplyDownvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noUpvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
                noDownvotes: import("zod").ZodOptional<import("zod").ZodBoolean>;
                requirePostLink: import("zod").ZodOptional<import("zod").ZodBoolean>;
                requirePostLinkIsMedia: import("zod").ZodOptional<import("zod").ZodBoolean>;
            }, import("zod/v4/core").$loose>>>;
            suggested: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
                primaryColor: import("zod").ZodOptional<import("zod").ZodString>;
                secondaryColor: import("zod").ZodOptional<import("zod").ZodString>;
                avatarUrl: import("zod").ZodOptional<import("zod").ZodString>;
                bannerUrl: import("zod").ZodOptional<import("zod").ZodString>;
                backgroundUrl: import("zod").ZodOptional<import("zod").ZodString>;
                language: import("zod").ZodOptional<import("zod").ZodString>;
            }, import("zod/v4/core").$loose>>>;
            flairs: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodArray<import("zod").ZodObject<{
                text: import("zod").ZodString;
                backgroundColor: import("zod").ZodOptional<import("zod").ZodString>;
                textColor: import("zod").ZodOptional<import("zod").ZodString>;
                expiresAt: import("zod").ZodOptional<import("zod").ZodNumber>;
            }, import("zod/v4/core").$loose>>>>>;
            settings: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodObject<{
                fetchThumbnailUrls: import("zod").ZodOptional<import("zod").ZodBoolean>;
                fetchThumbnailUrlsProxyUrl: import("zod").ZodOptional<import("zod").ZodString>;
                challenges: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                    path: import("zod").ZodOptional<import("zod").ZodString>;
                    name: import("zod").ZodOptional<import("zod").ZodString>;
                    options: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodString>>;
                    exclude: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
                        subplebbit: import("zod").ZodOptional<import("zod").ZodObject<{
                            addresses: import("zod").ZodArray<import("zod").ZodString>;
                            maxCommentCids: import("zod").ZodNumber;
                            postScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                            replyScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                            firstCommentTimestamp: import("zod").ZodOptional<import("zod").ZodNumber>;
                        }, import("zod/v4/core").$strict>>;
                        postScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                        replyScore: import("zod").ZodOptional<import("zod").ZodNumber>;
                        firstCommentTimestamp: import("zod").ZodOptional<import("zod").ZodNumber>;
                        challenges: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodNumber>>;
                        role: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodUnion<[import("zod").ZodEnum<{
                            owner: "owner";
                            admin: "admin";
                            moderator: "moderator";
                        }>, import("zod").ZodString]>>>;
                        address: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString>>;
                        rateLimit: import("zod").ZodOptional<import("zod").ZodNumber>;
                        rateLimitChallengeSuccess: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        publicationType: import("zod").ZodOptional<import("zod").ZodObject<{
                            post: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            reply: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            vote: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            commentEdit: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            commentModeration: import("zod").ZodOptional<import("zod").ZodBoolean>;
                            subplebbitEdit: import("zod").ZodOptional<import("zod").ZodBoolean>;
                        }, import("zod/v4/core").$loose>>;
                    }, import("zod/v4/core").$loose>>>;
                    description: import("zod").ZodOptional<import("zod").ZodString>;
                    pendingApproval: import("zod").ZodOptional<import("zod").ZodBoolean>;
                }, import("zod/v4/core").$strict>>>;
                maxPendingApprovalCount: import("zod").ZodOptional<import("zod").ZodNumber>;
                purgeDisapprovedCommentsOlderThan: import("zod").ZodOptional<import("zod").ZodNumber>;
            }, import("zod/v4/core").$strict>>>;
            roles: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodString, import("zod").ZodUnion<[import("zod").ZodObject<{
                role: import("zod").ZodUnion<[import("zod").ZodEnum<{
                    owner: "owner";
                    admin: "admin";
                    moderator: "moderator";
                }>, import("zod").ZodString]>;
            }, import("zod/v4/core").$loose>, import("zod").ZodUndefined]>>>>;
        }, import("zod/v4/core").$strict>;
    }, import("zod/v4/core").$loose>;
}, import("zod/v4/core").$strip>;
export declare const SubplebbitEditPublicationPubsubReservedFields: string[];
